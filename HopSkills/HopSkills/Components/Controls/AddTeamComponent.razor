@inject IAddTeamUseCase addTeamUseCase
<EditForm Model="team" FormName="formTeam" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem>
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem>
                            <MudTextField Label="Enter the team's name"
                                          HelperText="Max. 20 characters"
                                          Variant="Variant.Outlined"
                                          @bind-Value="team.Name" For="@(() => team.Name)" />
                        </MudItem>
                        <MudItem>
                            <MudSwitch @bind-Value="team.IsActive"
                                       Color="Color.Success" UncheckedColor="Color.Error">Activate</MudSwitch>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudGrid Justify="Justify.FlexEnd">
                        <MudItem>
                            <MudButton ButtonType="ButtonType.Submit" OnClick="Cancel" 
                            Variant="Variant.Filled"
                            Color="Color.Dark" Class="ml-auto">Cancel</MudButton>
                        </MudItem>
                        <MudItem>
                            <MudButton ButtonType="ButtonType.Submit" 
                            Variant="Variant.Filled"
                            Color="Color.Primary" Class="ml-auto">Add</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>
@code {
    [SupplyParameterFromForm]
    TeamViewModel team { get; set; } = new TeamViewModel();
    bool success;
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();

    private async void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
        var tem = new Team
            {
                Name = team.Name,
                CompanyId = 100,
                CreationDate = DateTime.Now,
                UpdateDate = DateTime.Now,
                IsActive = team.IsActive
            };
        await addTeamUseCase.ExecuteAsync(tem);
        Submit();
    }
}

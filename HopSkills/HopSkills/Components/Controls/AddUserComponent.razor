@inject IAddUserUseCase addUserUseCase
<EditForm Model="user" FormName="formUser" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator />
<ValidationSummary></ValidationSummary>
    <MudGrid>
        <MudItem>
            <MudCard>
                <MudCardContent>
                    <MudGrid Spacing="6">
                        <MudItem>
                            <MudTextField Label="First Name"
                                  HelperText="Max. 10 characters"
                                  @bind-Value="user.FirstName" For="@(() => user.FirstName)" />
                            <MudTextField Label="Email"
                                          HelperText="Max. 20 characters"
                                          @bind-Value="user.Email" For="@(() => user.Email)" />
                            <MudTextField Label="Phone" 
                                          HelperText="Max. 10 characters"
                                          @bind-Value="user.Phone" For="@(() => user.Phone)" />
                        </MudItem>
                        <MudItem>
                    <MudTextField  Label="Last Name"
                                  HelperText="Max. 15 characters"
                                  @bind-Value="user.LastName" For="@(() => user.LastName)" />
                    
                    <MudTextField Label="Address"
                                  HelperText="Max. 25 characters"
                                  @bind-Value="user.Address" For="@(() => user.Address)" />
                            <MudSelect T="string" @bind-Value="CompanySelected" Label="Companies" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var item in companies)
                                {
                                    <MudSelectItem Value="item.Name" />
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudGrid Justify="Justify.FlexEnd">
                        <MudItem>
                    <MudButton ButtonType="ButtonType.Submit" OnClick="Cancel" Variant="Variant.Filled"
                               Color="Color.Dark" Class="ml-auto">Cancel</MudButton>
                        </MudItem>
                        <MudItem>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" 
                Color="Color.Primary" Class="ml-auto">Add</MudButton>
                        </MudItem>
                    </MudGrid>
            </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>
@code {
    [SupplyParameterFromForm]
    UserViewModel user { get; set; } = new UserViewModel();
    List<Customer> companies = new List<Customer>() { new Customer
                {
                    CompanyId=10,
                    Address = $"Avenue",
                    Phone = "0654895647",
                    Name = "RandomString(12)",
                    Email = "@company.com",
                    Country = "CA",
                    Image = "image_url",
                    AttachedLicence = new Subscription
                    {
                        Description = "Licence",
                        Title = "Standard",
                        NumberOfUsers = 2,
                        Image = "image_url"
                    }
                },new Customer
                {
                    CompanyId=10,
                    Address = $"Avenue",
                    Phone = "0654895647",
                    Name = "RandomString(11)",
                    Email = "@company.com",
                    Country = "CA",
                    Image = "image_url",
                    AttachedLicence = new Subscription
                    {
                        Description = "Licence",
                        Title = "Standard",
                        NumberOfUsers = 2,
                        Image = "image_url"
                    }
                },new Customer
                {
                    CompanyId=10,
                    Address = $"Avenue",
                    Phone = "0654895647",
                    Name = "RandomString(113)",
                    Email = "@company.com",
                    Country = "CA",
                    Image = "image_url",
                    AttachedLicence = new Subscription
                    {
                        Description = "Licence",
                        Title = "Standard",
                        NumberOfUsers = 2,
                        Image = "image_url"
                    }
                },new Customer
                {
                    CompanyId=10,
                    Address = $"Avenue",
                    Phone = "0654895647",
                    Name = "RandomString(1zdqdz2)",
                    Email = "@company.com",
                    Country = "CA",
                    Image = "image_url",
                    AttachedLicence = new Subscription
                    {
                        Description = "Licence",
                        Title = "Standard",
                        NumberOfUsers = 2,
                        Image = "image_url"
                    }
                } };
    bool success;
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private string CompanySelected { get; set; }
    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();
    private async void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
        var use = new User
        {
            FirstName = user.FirstName,
            LastName = user.LastName,
            Address = user.Address,
            Email = user.Email,
            Phone = user.Phone,
            role = new Role{ Name="Employee", UseCases = new List<UseCase>()},
            companyId = companies.FirstOrDefault(c => c.Name==CompanySelected).CompanyId,
            CreationDate = DateTime.Now,
            LastUpdated = DateTime.Now
        };
        await addUserUseCase.ExecuteAsync(use);
        Submit();
    }
}

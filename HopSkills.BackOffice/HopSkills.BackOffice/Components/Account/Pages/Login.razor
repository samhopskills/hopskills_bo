@page "/Account/Login"
@attribute [AllowAnonymous]


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
<MudGrid Class="h-screen">
    <MudItem xs="12" sm="5" md="4" Class="bg-[#8a6eae] bg-opacity-5 d-flex align-center justify-center">
        <div Class="pa-8 text-center text-sm-left">
            <MudText Typo="Typo.h2" Style="color: #8a6eae" Class="font-weight-bold mb-4">Hopskills</MudText>
            <MudText Typo="Typo.h5" Class="mb-4">Administration Panel</MudText>
            <MudText Class="hidden sm-flex text-gray-600">
                Gérez vos équipes et suivez leur progression
            </MudText>
        </div>
    </MudItem>

    <MudItem xs="12" sm="7" md="8" Class="d-flex align-center justify-center bg-white">
        <div Class="pa-8 width-100" Style="max-width: 450px;">
            <MudText Typo="Typo.h4" Class="mb-4">Administration</MudText>
            <MudText Color="Color.Secondary" Class="mb-8">Connectez-vous à votre espace administrateur</MudText>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
            }

            <EditForm Model="loginModel" FormName="loginForm" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                
                <MudStaticTextField @bind-Value="loginModel.Email"
                    Label="Email administrateur"
                    Variant="Variant.Outlined"
                    Class="mb-4 bg-white"
                    Placeholder="admin@hopskills.com"
                    Required="true"
                    RequiredError="Email est requis"/>

                <MudStaticTextField 
                    @bind-Value="loginModel.Password"
                    Label="Mot de passe"
                    Variant="Variant.Outlined"
                    InputType="InputType.Password"
                    Class="mb-4 bg-white"
                    Required="true"
                    RequiredError="Mot de passe est requis"/>

                <div class="d-flex flex-column flex-sm-row justify-space-between align-center gap-4 mb-4">
                    <MudStaticCheckBox @bind-Checked="loginModel.RememberMe" 
                               Label="Se souvenir de moi" 
                               Color="Color.Primary"/>
                    <MudLink Href="/admin/forgot-password" 
                            Style="color: #8a6eae"
                            Underline="Underline.Hover">
                        Mot de passe oublié?
                    </MudLink>
                </div>

                <MudButton Variant="Variant.Filled" 
                          Style="background-color: #8a6eae"
                          FullWidth="true"
                          ButtonType="ButtonType.Submit"
                          Class="mb-4 py-3 text-white hover:opacity-90">
                    Connexion administrateur
                </MudButton>

                <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Class="mt-6">
                    Cet espace est réservé aux administrateurs. Si vous êtes un utilisateur, 
                    <MudLink Href="/login" Style="color: #8a6eae">cliquez ici</MudLink>.
                </MudAlert>
            </EditForm>
        </div>
    </MudItem>
</MudGrid>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel loginModel { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    
    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task HandleLogin()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(loginModel.Email, loginModel.Password, loginModel.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = loginModel.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

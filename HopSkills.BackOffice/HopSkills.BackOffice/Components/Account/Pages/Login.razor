@page "/Account/Login"
@attribute [AllowAnonymous]


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<MudGrid>
    <div class="d-none d-lg-flex col-lg-7 col-xl-8 align-items-center p-5">
    <MudItem class="w-100 d-flex justify-content-center">
        <MudImage Width="700" Src="Images/boy-with-rocket-light.png" />
    </MudItem>
    </div>
    <div style="background-color:white" class="d-flex col-12 col-lg-5 col-xl-4 align-items-center p-sm-12 p-6">
        <MudItem class="w-px-400 mx-auto mt-12 pt-5">
            <MudText Typo="Typo.h4" GutterBottom="true">Welcome to HopSkills! 👋</MudText>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <MudText GutterBottom="true" Typo="Typo.body1">Please sign-in to your account and start the adventure</MudText>
            <MudGrid>
                <MudItem md="6">
                        <MudStaticTextField Variant="Variant.Outlined"  For="@(() => Input.Email)" @bind-Value="Input.Email"
                                            Label="Email" Placeholder="name@example.com" 
                        UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="6">
                        <MudStaticTextField Variant="Variant.Outlined" For="@(() => Input.Password)" @bind-Value="Input.Password"
                                            Label="Password" InputType="InputType.Password" Placeholder="password" 
                        UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="6">
                    <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
                </MudItem>
                <MudItem md="6">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>

        <MudGrid Class="mt-4">
            <MudItem md="6">
                    <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink><br />
                    <p class="text-center">
                        <span>New on our platform?</span>
                <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", 
                new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                    <span>Create a new account</span>
                </MudLink><br />
                    </p>
                <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
            </MudItem>
        </MudGrid>
    </MudItem>
    </div>
</MudGrid>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

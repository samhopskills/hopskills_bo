@inject IAddUserUseCase addUserUseCase
@inject IConfiguration Config
@inject HttpClient Http
@attribute [Authorize]

<MudGrid>
    <div class="d-none d-lg-flex col-lg-7 col-xl-8 align-items-center p-5">
        <MudItem class="w-100 d-flex justify-content-center">
            <MudImage Width="700" Src="Images/girl-with-laptop-light.png" />
        </MudItem>
    </div>
    <div class="d-flex col-12 col-lg-5 col-xl-4 align-items-center authentication-bg p-sm-12 p-6">
        <MudItem class="w-px-400 mx-auto mt-12 pt-5">
            <MudText Typo="Typo.h4" class="mb-1">Adventure starts here 🚀</MudText>
            <EditForm Model="Input" FormName="formUser" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem>
                        <MudCard>
                            <MudCardContent>
                                <MudGrid Spacing="8">
                                    <MudItem md="6">
                                        <MudTextField Variant="Variant.Outlined" For="@(() => Input.FirstName)"
                                                      @bind-Value="Input.FirstName"
                                                      Label="Firstname" Placeholder="John"
                                                      UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                                        <MudTextField Variant="Variant.Outlined" For="@(() => Input.LastName)"
                                                      @bind-Value="Input.LastName"
                                                      Label="LastName" Placeholder="Doe"
                                                      UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                                        <MudSelect T="string"    Placeholder="Select a role"
                                                   @bind-Value="Input.Role"
                                                   Label="Roles" Variant="Variant.Outlined"
                                                   AnchorOrigin="Origin.BottomCenter">
                                                @foreach (var item in roles)
                                                {
                                                    <MudSelectItem Value="item.Name">
                                                        @item.Name
                                                    </MudSelectItem>
                                                }
                                        </MudSelect>
                                        <AuthorizeRoleView Roles="Admin">
                                            <Authorized>
                                                <MudSelect T="string" Placeholder="Select a Customer"
                                                           @bind-Value="Input.Company"
                                                           Label="Customers" Variant="Variant.Outlined"
                                                           AnchorOrigin="Origin.BottomCenter">
                                                    @foreach (var item in companies)
                                                    {
                                                        <MudSelectItem Value="item.Id">
                                                            @item.Name
                                                        </MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </Authorized>
                                        </AuthorizeRoleView>
                                    </MudItem>
                                    <MudItem md="6">
                                        <MudTextField Variant="Variant.Outlined" For="@(() => Input.Email)" @bind-Value="Input.Email"
                                                      Label="Email" Placeholder="name@example.com"
                                                      UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                                        <MudTextField Variant="Variant.Outlined" For="@(() => Input.Password)" @bind-Value="Input.Password"
                                                      Label="Password" InputType="InputType.Password" Placeholder="password"
                                                      UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />

                                        <MudTextField Variant="Variant.Outlined" For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                                      Label="Confirm Password" InputType="InputType.Password" Placeholder="confirm password"
                                                      UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                                       
                                                  </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            <MudCardActions>
                                <MudGrid Justify="Justify.FlexEnd">
                                    <MudItem>
                                        <MudButton ButtonType="ButtonType.Submit"
                                                   OnClick="Cancel" Variant="Variant.Filled"
                                                   Color="Color.Dark" Class="ml-auto">Cancel</MudButton>
                                    </MudItem>
                                    <MudItem>
                                        <MudButton ButtonType="ButtonType.Submit"
                                                   Variant="Variant.Filled"
                                                   Color="Color.Primary" Class="ml-auto">Add</MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
    </MudItem>
</div>
</MudGrid>

@code {
    [SupplyParameterFromForm]
    CreateUserViewModel Input { get; set; } = new CreateUserViewModel();
    List<CreateUserCustomerViewModel>? companies = new List<CreateUserCustomerViewModel>();
    List<RoleViewModel>? roles = new List<RoleViewModel>();
    private string? RoleSelected { get; set; }
    private string? serviceEndpoint;
    private string? serviceEndpointRole;
    private string? serviceEndpointCustomers;

    bool success;
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private CustomerViewModel CompanySelected { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();


    private async void OnLoadAsync()
    {
        if(!roles.Any())
        {
            if (!string.IsNullOrEmpty(serviceEndpoint))
            {
                roles = await Http.GetFromJsonAsync<List<RoleViewModel>>(serviceEndpointRole);
            }
        }
        if (!companies.Any())
        {
            if (!string.IsNullOrEmpty(serviceEndpointCustomers))
            {
                companies = await Http.GetFromJsonAsync<List<CreateUserCustomerViewModel>>(serviceEndpointCustomers);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"https://localhost:7079/api/User/Create";
        serviceEndpointRole = $"https://localhost:7079/api/Role/GetRoles";
        serviceEndpointCustomers = $"https://localhost:7079/api/Customer/GetAll";
        OnLoadAsync();
    }
    private async void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
        if(Input.Role is not null && Input.Company is not null)
            await Http.PostAsJsonAsync(serviceEndpoint, Input);
        Submit();
    }
}

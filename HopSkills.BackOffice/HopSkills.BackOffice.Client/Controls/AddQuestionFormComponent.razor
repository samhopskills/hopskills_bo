@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar
<style>
    .answer-container {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
    }

    .answer-text {
        flex-grow: 1;
        margin-right: 8px;
    }

    .answer-actions {
        display: flex;
        align-items: center;
    }

    .correct-answer {
        border: 2px solid rgba(0,200,83,1);
        border-radius: 24px;
    }

    .question-paper{
        border-radius: 24px;
    }
    .question-paper.selected {
        border: 3px solid #673AB7 !important;
        border-radius: 24px;
    }

    .quiz-title {
        font-weight: bold;
        margin-right: auto;
    }

</style>

<div class="d-flex justify-space-between align-center mb-2">
    <MudText Typo="Typo.h6" Class="quiz-title">@QuizTitle</MudText>
    <div class="d-flex justify-end align-center">
        <MudTooltip Text="Quiz Duration">
            <div class="d-flex align-center">
                <MudNumericField @bind-Value="Minutes"
                                 Label="Min"
                                 Min="0"
                                 Max="59"
                                 Style="width: 60px; margin-right: 4px;"
                                 Variant="Variant.Text"
                                 Density="Density.Compact"
                                 HideSpinButtons="true" />
                <MudText Class="mx-1">:</MudText>
                <MudNumericField @bind-Value="Seconds"
                                 Label="Sec"
                                 Min="0"
                                 Max="59"
                                 Style="width: 60px;"
                                 Variant="Variant.Text"
                                 Density="Density.Compact"
                                 HideSpinButtons="true" />
            </div>
        </MudTooltip>
        <MudTooltip Text="Experience Points" Class="ml-4">
            <MudText Typo="Typo.body2" Inline="true" Class="ml-1">@questionFormInput.Xperience XP</MudText>
        </MudTooltip>
        <MudTooltip Text="Delete the page">
            <MudIconButton Size="Size.Small" OnClick="OnCancelSubmit"
                           Icon="@Icons.Material.Outlined.Delete" />
        </MudTooltip>
        <MudTooltip Text="Add a page">
            <MudIconButton Size="Size.Small" OnClick="OnAddSubmit"
                           Icon="@Icons.Material.Outlined.NoteAdd" />
        </MudTooltip>
    </div>
</div>
<MudPaper Elevation="3" ref="componentRef"
          Class="@($"pa-4 question-paper {(IsSelected ? "selected" : "")}")" 
    @onclick="OnSelectClicked">
    <EditForm Model="@questionFormInput" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudGrid>
                   
                    <MudItem xs="12">
                        <MudTextField @ref="firstInputRef" T="string" Label="Question"
                                      @bind-Value="@questionFormInput.Question"
                                      Required="true" Variant="Variant.Outlined"
                                      UserAttributes="@(new() { { "aria-required", "true" } } )"
                                      For="@(() => questionFormInput.Question)"
                                      Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.QuestionMark"
                                      InputMode="InputMode.text" AutoGrow="true" Lines="1" />

                    </MudItem>
                </MudGrid>
                @if (questionFormInput.PossibleAnswers is not null && questionFormInput.PossibleAnswers.Count != 0)
                {
                    @foreach (var item in questionFormInput.PossibleAnswers)
                    {
                        <MudPaper Elevation="0" Class="answer-container pa-2">
                            <div class="answer-text">
                                <MudTextField InputMode="InputMode.text"
                                              Required="true"
                                              T="string"
                                              Label="@(item.IsCorrect ? "Correct Answer" : item.Label)"
                                              @bind-Value="@item.Answer"
                                              UserAttributes="@(new() { { "aria-required", "true" } } )"
                                              For="@(() => item.Label)"
                                              Variant="Variant.Outlined"
                                              Class="@(item.IsCorrect ? "correct-answer" : "")"
                                              FullWidth="true" />
                            </div>
                            <div class="answer-actions">
                                <MudSwitch @bind-Value="@item.IsCorrect"
                                           Color="@(item.IsCorrect ? Color.Success : Color.Error)"
                                           ThumbIcon="@(item.IsCorrect ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"
                                           ThumbIconColor="@(item.IsCorrect ? Color.Success : Color.Error)"
                                           Class="ma-0 pa-0" />
                                <MudIconButton OnClick="@(() => DeleteAnswer(item.Order))"
                                               Icon="@Icons.Material.Rounded.Delete"
                                               Size="Size.Small"
                                               Class="ml-2" />
                            </div>
                        </MudPaper>
                    }
                }
                <MudGrid>
                    <MudItem xs="4" sm="4" md="4">
                        <MudButton ButtonType="ButtonType.Button"
                                   EndIcon="@Icons.Material.Filled.Add"
                                   OnClick="AddAnswer">Add an answer</MudButton>
                    </MudItem>
                </MudGrid>
                <br />
                <MudGrid>
                    <MudItem xs="12" sm="12" md="12">
                        <MudTextField InputMode="InputMode.text"
                                      T="string"
                                      Label="Explain the correct answer"
                                      Required="true"
                                      @bind-Value="@questionFormInput.CorrectAnswerExplanation"
                                      UserAttributes="@(new() { { "aria-required", "true" } } )"
                                      For="@(() => questionFormInput.CorrectAnswerExplanation)"
                                      AutoGrow="true" Variant="Variant.Filled" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <br />
            @* <MudCardActions>
                @if (!hasBeenValidated)
                {
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               DropShadow="false" Class="ml-auto">Validate</MudButton>

                }
            </MudCardActions> *@
        </MudCard>
    </EditForm>
    </MudPaper>

@code {
    int spacing;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    IList<IBrowserFile> _audios = new List<IBrowserFile>();
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Parameter] public CreateMultipleQuestionsViewModel questionFormInput { get; set; }
    [Parameter] public EventCallback OnCancelEvent { get; set; }
    [Parameter] public EventCallback OnAddEvent { get; set; }
    [Parameter] public EventCallback<CreateMultipleQuestionsViewModel> OnValidEvent { get; set; }
    [Parameter] public bool IsSelected { get; set; }
    [Parameter] public EventCallback OnSelect { get; set; }
    private MudTextField<string> firstInputRef;
    private ElementReference componentRef;
    [Parameter] public string QuizTitle { get; set; }
    public async Task FocusFirstInput()
    {
        if (firstInputRef != null)
        {
            await firstInputRef.FocusAsync();
        }
    }
    protected override void OnParametersSet()
    {
        Console.WriteLine($"AddQuestionFormComponent: IsSelected = {IsSelected}");
        base.OnParametersSet();
    }

    private async Task OnSelectClicked()
    {
        Console.WriteLine("OnSelectClicked called");
        await OnSelect.InvokeAsync();
    }
    private CustomerViewModel CompanySelected { get; set; }
    public bool Dense_CheckBox { get; set; }
    private bool fileNameWrong { get; set; }
    private bool audioFileNameWrong { get; set; }
    private bool formDisabled { get; set; }
    private List<string> base64Images = new();
    private List<string> base64Audios = new();
    public int Id { get; set; }
    private int Minutes { get; set; }
    private int Seconds { get; set; }
    private bool hasBeenValidated { get; set; }
    private async void Cancel()
    {
        await OnCancelEvent.InvokeAsync();
    }


    private void OnExpandCollapseClick()
    {
        questionFormInput.Expanded = !questionFormInput.Expanded;
    }

    protected override async Task OnInitializedAsync()
    {
        Minutes = questionFormInput.Duration.Value.Minutes;
        Seconds = questionFormInput.Duration.Value.Seconds;
        
        questionFormInput.PossibleAnswers.LastOrDefault().Id = questionFormInput.PossibleAnswers.LastOrDefault().Order = questionFormInput.PossibleAnswers.Count() - 1;
    }

    private EventCallback DeleteImg(string img)
    {
        base64Images.Remove(img);
        StateHasChanged();
        return EventCallback.Empty;
    }

    private void AddAnswer()
    {
        questionFormInput.PossibleAnswers.Add(new CreateAnswerViewModel
        {
                Label = $"Answer {questionFormInput.PossibleAnswers.Count + 1}",
            Answer = string.Empty,
            IsCorrect = false
        });
        questionFormInput.PossibleAnswers.LastOrDefault().Id = questionFormInput.PossibleAnswers.LastOrDefault().Order = questionFormInput.PossibleAnswers.Count() - 1;
    }

    private EventCallback CorrectAnswer(int Id)
    {
        questionFormInput.PossibleAnswers[Id].IsCorrect = true;
        return EventCallback.Empty;
    }

    private EventCallback DeleteAnswer(int Id)
    {
        questionFormInput.PossibleAnswers.RemoveAt(Id);
        return EventCallback.Empty;
    }

    private async void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
        var format = "image/png";
        var resizeImage = await file.RequestImageFileAsync(format, 640, 480);
        var buffer = new byte[resizeImage.Size];
        await resizeImage.OpenReadStream().ReadAsync(buffer);
        base64Images.Add(Convert.ToBase64String(buffer));
        // base64Images.Add("data:image/png;base64," + Convert.ToBase64String(buffer));
        StateHasChanged();
    }

    private async void UploadFiles2(IBrowserFile file)
    {
        _audios.Add(file);
        using (var stream = file.OpenReadStream())
        {
            var length = stream.Length;
            if (length <= int.MaxValue)
            {
                var result = new byte[length];
                await stream.ReadAsync(result);
                base64Audios.Add(Convert.ToBase64String(result));
                // base64Audios.Add("data:audio/mp3;base64," + Convert.ToBase64String(result));
                StateHasChanged();
            }
        }
    }

    private async void OnCancelSubmit()
    {
        await OnCancelEvent.InvokeAsync(Id);
    }

    private async void OnAddSubmit()
    {
        await OnAddEvent.InvokeAsync(Id);
    }

    private async void OnValidSubmit()
    {
        if (questionFormInput.PossibleAnswers is not null 
            && questionFormInput.PossibleAnswers.Count() != 0)
        {
            var correctCount = questionFormInput.PossibleAnswers.Where(p => p.IsCorrect == true).Count();
            if(correctCount > 0)
            {
                questionFormInput.Duration = new TimeSpan(0, Minutes, Seconds);
                hasBeenValidated = true;
                questionFormInput.ImageFiles = base64Images;
                questionFormInput.AudioFiles = base64Audios;
                await OnValidEvent.InvokeAsync(questionFormInput);
            }
           else
                Snackbar.Add("Please add at least one correct answer", MudBlazor.Severity.Error);
        }
        else
            Snackbar.Add("Please add at least two answers", MudBlazor.Severity.Error);
    }

    
}

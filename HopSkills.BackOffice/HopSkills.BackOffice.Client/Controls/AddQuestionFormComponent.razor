@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<style>
    .answer-container {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
    }

    .answer-text {
        flex-grow: 1;
        margin-right: 8px;
    }

    .answer-actions {
        display: flex;
        align-items: center;
    }

    .correct-answer {
        border: 2px solid rgba(0,200,83,1);
        border-radius: 24px;
    }

    .question-paper{
        border-radius: 24px;
    }
    .question-paper.selected {
        border: 3px solid #673AB7 !important;
        border-radius: 24px;
    }

    .quiz-title {
        font-weight: bold;
        margin-right: auto;
    }

    .preview-container {
        display: flex;
        flex-wrap: nowrap;
        overflow-x: auto;
        gap: 10px;
        padding: 10px 0;
    }

    .image-preview {
        max-width: 150px;
        max-height: 150px;
        object-fit: cover;
    }

    .audio-preview {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .file-preview-container {
        position: relative;
        display: inline-block;
        margin-right: 10px;
    }

    .delete-button {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: rgba(255, 255, 255, 0.7);
        border-radius: 50%;
        padding: 2px;
    }

</style>

<div class="d-flex justify-space-between align-center mb-2">
    <MudText Typo="Typo.h6" Class="quiz-title">@QuizTitle</MudText>
    <MudTooltip Text="Quiz Duration">
        <div class="d-flex align-center">
            <MudNumericField @bind-Value="Minutes"
                             Label="Min"
                             Min="0"
                             Max="59"
                             Style="width: 60px; margin-right: 4px;"
                             Variant="Variant.Text"
                             Density="Density.Compact"
                             HideSpinButtons="true" />
            <MudText Class="mx-1">:</MudText>
            <MudNumericField @bind-Value="Seconds"
                             Label="Sec"
                             Min="0"
                             Max="59"
                             Style="width: 60px;"
                             Variant="Variant.Text"
                             Density="Density.Compact"
                             HideSpinButtons="true" />
        </div>
    </MudTooltip>
    <MudTooltip Text="Experience Points" Class="ml-4">
        <MudTextField AdornmentIcon="@Icons.Material.Outlined.Star" Adornment="Adornment.End" @bind-Value="@questionFormInput.Xperience" Style="width: 60px;" Class="mx-1" />
    </MudTooltip>
    <div class="d-flex justify-end align-center">
        <MudTooltip Text="Upload Image">
            <MudIconButton Size="Size.Medium" OnClick="@(() => OpenFileInput("fileInput"))"
                           Icon="@Icons.Material.Outlined.Image" />
        </MudTooltip>
        <MudTooltip Text="Upload Audio">
            <MudIconButton Size="Size.Medium" OnClick="@(() => OpenFileInput("audioInput"))"
                           Icon="@Icons.Material.Outlined.AudioFile" />
        </MudTooltip>
        <InputFile id="fileInput" OnChange="@UploadFiles" hidden accept=".png,.jpg,.jpeg" />
        <InputFile id="audioInput" OnChange="@UploadFiles2" hidden accept=".mp3,.wav" />
        <MudTooltip Text="Delete the page">
            <MudIconButton Size="Size.Medium" OnClick="OnCancelSubmit"
                           Icon="@Icons.Material.Outlined.Delete" />
        </MudTooltip>
        <MudTooltip Text="Add a page">
            <MudIconButton Size="Size.Medium" OnClick="OnAddSubmit"
                           Icon="@Icons.Material.Outlined.NoteAdd" />
        </MudTooltip>
    </div>
</div>
<MudPaper Elevation="3" ref="componentRef"
          Class="@($"pa-4 question-paper {(IsSelected ? "selected" : "")}")" 
    @onclick="OnSelectClicked">
    <EditForm Model="@questionFormInput" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @ref="firstInputRef" T="string" Label="Question"
                                      @bind-Value="@questionFormInput.Question"
                                      Required="true" Variant="Variant.Outlined"
                                      UserAttributes="@(new() { { "aria-required", "true" } } )"
                                      For="@(() => questionFormInput.Question)"
                                      Adornment="Adornment.End" 
                                      AdornmentIcon="@Icons.Material.Filled.QuestionMark"
                                      InputMode="InputMode.text" AutoGrow="true" Lines="1" />

                    </MudItem>
                </MudGrid>
                @if (questionFormInput.PossibleAnswers is not null 
                && questionFormInput.PossibleAnswers.Count != 0)
                {
                    @foreach (var item in 
                    questionFormInput.PossibleAnswers.Where(a => a.ChangeType != "Deleted"))
                    {
                        <MudPaper Elevation="0" Class="answer-container pa-2">
                            <div class="answer-text">
                                <MudTextField InputMode="InputMode.text"
                                              Required="true"
                                              T="string"
                                              Label="@(item.IsCorrect ? "Correct Answer" : item.Label)"
                                              @bind-Value="@item.Answer"
                                              For="@(() => item.Label)"
                                              Variant="Variant.Outlined"
                                              Class="@(item.IsCorrect ? "correct-answer" : "")"
                                              FullWidth="true"
                                              @onclick:stopPropagation
                                              @onfocus="@(() => PreventDefaultFocus())" />
                            </div>
                            <div class="answer-actions">
                                <MudSwitch @bind-Value="@item.IsCorrect"
                                           Color="@(item.IsCorrect ? Color.Success : Color.Error)"
                                           ThumbIcon="@(item.IsCorrect ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"
                                           ThumbIconColor="@(item.IsCorrect ? Color.Success : Color.Error)"
                                           Class="ma-0 pa-0" />
                                <MudIconButton OnClick="@(() => DeleteAnswer(item.Id))"
                                               Icon="@Icons.Material.Rounded.Delete"
                                               Size="Size.Small"
                                               Class="ml-2" />
                            </div>
                        </MudPaper>
                    }
                }
                <MudGrid>
                    <MudItem xs="4" sm="4" md="4">
                        <MudButton ButtonType="ButtonType.Button"
                                   EndIcon="@Icons.Material.Filled.Add"
                                   OnClick="AddAnswer">Add an answer</MudButton>
                    </MudItem>
                </MudGrid>
                <br />
                <MudGrid>
                    <MudItem xs="12" sm="12" md="12">
                        <MudTextField InputMode="InputMode.text"
                                      T="string"
                                      Label="Explain the correct answer"
                                      Required="true"
                                      @bind-Value="@questionFormInput.CorrectAnswerExplanation"
                                      For="@(() => questionFormInput.CorrectAnswerExplanation)"
                                      AutoGrow="true" Variant="Variant.Filled"
                                      @onclick:stopPropagation
                                      @onfocus="@(() => PreventDefaultFocus())" />
                    </MudItem>
                </MudGrid>
                @if (questionFormInput.ImageFiles != null 
                && questionFormInput.ImageFiles.Count() != 0)
                {
                    <MudText Typo="Typo.subtitle1" Class="mt-2">Images:</MudText>
                    <div class="preview-container">
                        @for (int i = 0; i < questionFormInput.ImageFiles.Count; i++)
                        {
                            var index = i;
                            @if (!questionFormInput.ImageFiles[index].Delete)
                            {
                                <div class="file-preview-container">
                                    <img src="data:image/png;base64,@questionFormInput.ImageFiles[index].Content" alt="Preview" class="image-preview" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Size="Size.Small"
                                                   Class="delete-button"
                                                   OnClick="@(() => DeleteImage(index))" />
                                </div>
                            }
                        }
                    </div>
                }
                @if (questionFormInput.AudioFiles != null 
                && questionFormInput.AudioFiles.Count() != 0)
                {
                    <MudText Typo="Typo.subtitle1" Class="mt-2">Audio Files:</MudText>
                    <div class="preview-container">
                        @for (int i = 0; i < questionFormInput.AudioFiles.Count; i++)
                        {
                            var index = i;
                            @if (!questionFormInput.AudioFiles[index].Delete)
                            {
                                <div class="file-preview-container">
                                    <div class="audio-preview">
                                        <audio controls>
                                            <source src="data:audio/mpeg;base64,@questionFormInput.AudioFiles[index].Content" type="audio/mpeg">
                                            Your browser does not support the audio element.
                                        </audio>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                       Size="Size.Small"
                                                       Class="delete-button"
                                                       OnClick="@(() => DeleteAudio(index))" />
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
            </MudCardContent>
        </MudCard>
    </EditForm>
    </MudPaper>

@code {
    int spacing;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    IList<IBrowserFile> _audios = new List<IBrowserFile>();
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Parameter] public CreateMultipleQuestionsViewModel questionFormInput { get; set; }
    [Parameter] public EventCallback OnCancelEvent { get; set; }
    [Parameter] public EventCallback OnAddEvent { get; set; }
    [Parameter] public EventCallback<CreateMultipleQuestionsViewModel> OnValidEvent { get; set; }
    [Parameter] public bool IsSelected { get; set; }
    [Parameter] public EventCallback OnSelect { get; set; }
    private MudTextField<string> firstInputRef;
    private ElementReference componentRef;
    [Parameter] public string QuizTitle { get; set; }

    private const int MaxImageSizeBytes = 5 * 1024 * 1024; // 5 MB
    private const int MaxAudioSizeBytes = 10 * 1024 * 1024;
    private ElementReference UploadFile;
    private ElementReference UploadAudio;
    public async Task FocusFirstInput()
    {
        if (firstInputRef != null)
        {
            await firstInputRef.FocusAsync();
        }
    }
    protected override void OnParametersSet()
    {
        Console.WriteLine($"AddQuestionFormComponent: IsSelected = {IsSelected}");
        base.OnParametersSet();
    }

    private async Task OnSelectClicked()
    {
        Console.WriteLine("OnSelectClicked called");
        await OnSelect.InvokeAsync();
    }

    private void PreventDefaultFocus()
    {
        // Cette méthode est vide, mais elle empêche la propagation de l'événement focus
    }
    private CustomerViewModel CompanySelected { get; set; }
    public bool Dense_CheckBox { get; set; }
    private bool fileNameWrong { get; set; }
    private bool audioFileNameWrong { get; set; }
    private bool formDisabled { get; set; }
    private List<string> base64Images = new();
    private List<string> base64Audios = new();
    public int Id { get; set; }
    private int Minutes { get; set; }
    private int Seconds { get; set; }
    private bool hasBeenValidated { get; set; }
    private async void Cancel()
    {
        await OnCancelEvent.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.openFileInput = function(inputId) {
                    document.getElementById(inputId).click();
                }
            ");
        }
    }

    private async void DeleteImage(int index)
    {
        if (questionFormInput.ImageFiles != null
            && questionFormInput.ImageFiles.Count() != 0)
            questionFormInput.ImageFiles[index].Delete = true;
        StateHasChanged();
    }

    private void DeleteAudio(int index)
    {
        if (questionFormInput.AudioFiles != null
                && questionFormInput.AudioFiles.Count() != 0)
            questionFormInput.AudioFiles[index].Delete = true;
        StateHasChanged();
    }

    private async Task OpenFileInput(string inputId)
    {
        await JSRuntime.InvokeVoidAsync("openFileInput", inputId);
    }
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(10)) // Limite à 10 fichiers
        {
            if (file.Size > MaxImageSizeBytes)
            {
                Snackbar.Add($"File {file.Name} is too large. Max size is 5 MB.", Severity.Error);
                continue;
            }
            if (questionFormInput.ImageFiles is null)
                questionFormInput.ImageFiles = new List<GameFileModel>();
            var format = "image/png";
            var resizeImage = await file.RequestImageFileAsync(format, 640, 480);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            questionFormInput.ImageFiles.Add(new GameFileModel{
                Content = Convert.ToBase64String(buffer),
                Delete = false
            });
            base64Images.Add(Convert.ToBase64String(buffer));

        }
        StateHasChanged();
    }

    private async Task UploadFiles2(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(5)) // Limite à 5 fichiers audio
        {
            if (file.Size > MaxAudioSizeBytes)
            {
                Snackbar.Add($"File {file.Name} is too large. Max size is 10 MB.", Severity.Error);
                continue;
            }
            if (questionFormInput.AudioFiles is null)
                questionFormInput.AudioFiles = new List<GameFileModel>();
            using (var stream = file.OpenReadStream(MaxAudioSizeBytes))
            {
                var buffer = new byte[file.Size];
                await stream.ReadAsync(buffer);
                questionFormInput.AudioFiles.Add(new GameFileModel
                    {
                        Content = Convert.ToBase64String(buffer),
                        Delete = false
                    });
                base64Audios.Add(Convert.ToBase64String(buffer));
            }
        }
        StateHasChanged();
    }

    private void OnExpandCollapseClick()
    {
        questionFormInput.Expanded = !questionFormInput.Expanded;
    }

    protected override async Task OnInitializedAsync()
    {
        Minutes = questionFormInput.Duration.Value.Minutes;
        Seconds = questionFormInput.Duration.Value.Seconds;
        base64Images = questionFormInput.ImageFiles?.Select(i => i.Content).ToList();
        base64Audios = questionFormInput.AudioFiles?.Select(i => i.Content).ToList();
        questionFormInput.PossibleAnswers.LastOrDefault().Id = questionFormInput.PossibleAnswers.LastOrDefault().Order = questionFormInput.PossibleAnswers.Count() - 1;
    }

    private EventCallback DeleteImg(string img)
    {
        base64Images.Remove(img);
        StateHasChanged();
        return EventCallback.Empty;
    }

    private void AddAnswer()
    {
        questionFormInput.PossibleAnswers.Add(new CreateAnswerViewModel
        {
                Label = $"Answer {questionFormInput.PossibleAnswers.Count + 1}",
            Answer = string.Empty,
            IsCorrect = false,
            ChangeType = "Added"
        });
        questionFormInput.PossibleAnswers.LastOrDefault().Id = questionFormInput.PossibleAnswers.LastOrDefault().Order = questionFormInput.PossibleAnswers.Count() - 1;
    }

    private EventCallback CorrectAnswer(int Id)
    {
        questionFormInput.PossibleAnswers[Id].IsCorrect = true;
        return EventCallback.Empty;
    }

    private EventCallback DeleteAnswer(int Id)
    {
        questionFormInput.PossibleAnswers[Id].ChangeType = "Deleted";
        return EventCallback.Empty;
    }

    private async void OnCancelSubmit()
    {
        await OnCancelEvent.InvokeAsync(Id);
    }

    private async void OnAddSubmit()
    {
        await OnAddEvent.InvokeAsync(Id);
    }

    private async void OnValidSubmit()
    {
        if (questionFormInput.PossibleAnswers is not null 
            && questionFormInput.PossibleAnswers.Count() != 0)
        {
            var correctCount = questionFormInput.PossibleAnswers.Where(p => p.IsCorrect == true).Count();
            if(correctCount > 0)
            {
                questionFormInput.Duration = new TimeSpan(0, Minutes, Seconds);
                hasBeenValidated = true;
                await OnValidEvent.InvokeAsync(questionFormInput);
            }
           else
                Snackbar.Add("Please add at least one correct answer", MudBlazor.Severity.Error);
        }
        else
            Snackbar.Add("Please add at least two answers", MudBlazor.Severity.Error);
    }

    
}

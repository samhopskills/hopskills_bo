@using System.ComponentModel.DataAnnotations
@inject IAddRoleUseCase addRoleUseCase
@inject IConfiguration Config
<EditForm Model="Input" FormName="formRole" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem>
            <MudCard>
                <MudCardContent>
                    <MudGrid Spacing="16">
                        <MudItem>
                            <MudTextField Label="Name"
                                          HelperText="Max. 10 characters" Variant="Variant.Outlined"
                                          @bind-Value="Input.Name" For="@(() => Input.Name)" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudGrid Justify="Justify.FlexEnd">
                        <MudItem>
                            <MudButton ButtonType="ButtonType.Submit"
                                       OnClick="Cancel" Variant="Variant.Filled"
                                       Color="Color.Dark" Class="ml-auto">Cancel</MudButton>
                        </MudItem>
                        <MudItem>
                            <MudButton ButtonType="ButtonType.Submit"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary" Class="ml-auto">Add</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>
@code {
    [SupplyParameterFromForm]
    private RoleViewModel Input { get; set; } = new();
    private string? serviceEndpoint;
    private HttpClient Http = new HttpClient();
    // [SupplyParameterFromForm]
    // RoleViewModel role { get; set; } = new RoleViewModel();
    bool success;
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"https://localhost:7079/api/Role/addRoles";
        // Roles = await ViewRoleListUseCase.ExecuteAsync();
    }

    private async void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
        if(!string.IsNullOrEmpty(Input.Name))
        {
            await Http.PostAsJsonAsync(serviceEndpoint, Input);
        }
        Submit();
    }

    private RenderFragment _panelContent;

    private async Task OnExpandedChanged(bool newVal)
    {
        if (newVal)
        {
            await Task.Delay(600);
            _panelContent = _bigAsyncContent;
        }
        else
        {
            // Reset after a while to prevent sudden collapse.
            Task.Delay(350).ContinueWith(t => _panelContent = null).CatchAndLog();
        }
    }

    private RenderFragment _bigAsyncContent = __builder =>
    {
        <div>The expansion of the</div>
        <div>inner panel is done after</div>
        <div>ExpandedChanged</div>
        <div>has completed to allow for</div>
        <div>smooth opening of async data</div>
        <div>of initially unknown height.</div>
    };

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [Display(Name = "Name")]
        public string Name { get; set; } = "";

        // [Required]
        // [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        // [DataType(DataType.Password)]
        // [Display(Name = "Password")]
        // public string Password { get; set; } = "";

        // [DataType(DataType.Password)]
        // [Display(Name = "Confirm password")]
        // [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        // public string ConfirmPassword { get; set; } = "";
    }
}


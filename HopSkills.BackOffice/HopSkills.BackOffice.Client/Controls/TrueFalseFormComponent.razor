@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar

<br />
<br />
@* <MudButton FullWidth="true" OnClick="OnExpandCollapseClick">
    @(_expanded ? "Collapse" : $"Expand {questionFormInput.Question}")
</MudButton>
<MudDivider /> *@
<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        @* <MudCollapse Expanded="_expanded"> *@
        <EditForm Model="@questionFormInput" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudIconButton OnClick="OnCancelSubmit"
                                       Color="Color.Error" Icon="@Icons.Material.Filled.Delete" />
                        <MudItem xs="12">
                            <MudTextField T="string" Label="Question"
                                          @bind-Value="@questionFormInput.Question"
                                          Required="true" Variant="Variant.Outlined"
                                          UserAttributes="@(new() { { "aria-required", "true" } } )"
                                          For="@(() => questionFormInput.Question)"
                                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.QuestionMark"
                                          InputMode="InputMode.text" AutoGrow="true" Lines="5" />

                        </MudItem>
                    </MudGrid>
                    <br />
                    <br />
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="4">
                            <MudGrid Spacing="1" Justify="Justify.FlexStart">
                                <MudItem>
                                    <MudTextField Style="width:35px" T="int"
                                                  InputMode="InputMode.numeric"
                                                  Placeholder="00"
                                                  Required="true"
                                                  @bind-Value="@questionFormInput.Min"
                                                  UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                  For="@(() => questionFormInput.Min)" />
                                </MudItem>
                                <MudItem>
                                    <MudText>:</MudText>
                                </MudItem>
                                <MudItem>
                                    <MudTextField Style="width:35px" T="int"
                                                  InputMode="InputMode.numeric" Placeholder="00"
                                                  Required="true"
                                                  @bind-Value="@questionFormInput.Sec"
                                                  UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                  For="@(() => questionFormInput.Sec)" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                            <MudTextField T="int" InputMode="InputMode.numeric" Label="Xp" Required="true"
                                          @bind-Value="@questionFormInput.Xperience"
                                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Star"
                                          UserAttributes="@(new() { { "aria-required", "true" } } )"
                                          For="@(() => questionFormInput.Xperience)" />
                        </MudItem>
                    </MudGrid>
                    <br />
                    <MudGrid>
                        <MudItem xs="4" sm="4" md="4">
                            <MudFileUpload T="IBrowserFile" Accept=".png" FilesChanged="UploadFiles">
                                <ActivatorContent>
                                    <MudFab Color="Color.Secondary"
                                            StartIcon="@Icons.Material.Filled.Image"
                                            Label="Load picture" />
                                </ActivatorContent>
                            </MudFileUpload>
                            <MudItem>
                                @if (base64Images.Any())
                                {
                                    @foreach (var file in base64Images)
                                    {
                                        <MudItem>
                                            <MudIconButton OnClick="DeleteImg(file)"
                                                           Icon="@Icons.Material.Filled.Delete" aria-label="delete" />
                                            <MudImage Src="@file"
                                                      Style="height:100px;width:100px;" />
                                        </MudItem>
                                    }
                                }
                            </MudItem>

                        </MudItem>
                        <MudItem xs="4" sm="4" md="4"></MudItem>
                        <MudItem xs="4" sm="4" md="4">
                            <MudFileUpload T="IBrowserFile"
                                           Accept=".mp3" FilesChanged="UploadFiles2" MaximumFileCount="100">
                                <ActivatorContent>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.AudioFile">
                                        Upload audio files (mp3)
                                    </MudButton>
                                    @if (base64Audios.Any())
                                    {
                                        @foreach (var file in base64Audios)
                                        {
                                            @if (!string.IsNullOrEmpty(file))
                                            {
                                                <MudItem>
                                                    <audio controls src="@file" />
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                                   aria-label="delete" />
                                                </MudItem>
                                            }
                                        }
                                    }
                                </ActivatorContent>
                            </MudFileUpload>

                        </MudItem>
                    </MudGrid>
                    <br />
                    <br />
                    <MudGrid>
                        <MudItem xs="6">
                            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
                        </MudItem>
                        <MudItem xs="6">
                            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
                        </MudItem>
                    </MudGrid>
                    <br />
                    <MudGrid>
                        <MudItem xs="12" sm="12" md="12">
                            <MudTextField InputMode="InputMode.text"
                                          T="string"
                                          Label="Explain the correct answer"
                                          Required="true"
                                          @bind-Value="questionFormInput.CorrectAnswerExplanation"
                                          UserAttributes="@(new() { { "aria-required", "true" } } )"
                                          For="@(() => questionFormInput.CorrectAnswerExplanation)"
                                          AutoGrow="true" Variant="Variant.Filled" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <br />
                <MudCardActions>
                    @if (!hasBeenValidated)
                    {
                        <MudButton ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   DropShadow="false" Class="ml-auto">Validate</MudButton>

                    }
                </MudCardActions>
            </MudCard>
        </EditForm>
        @* </MudCollapse> *@
    </MudItem>
</MudGrid>

@code {
    int spacing;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    IList<IBrowserFile> _audios = new List<IBrowserFile>();
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public EventCallback<int> OnCancelEvent { get; set; }
    [Parameter]
    public EventCallback<CreateMultipleQuestionsViewModel> OnValidEvent { get; set; }
    [Parameter]
    public CreateMultipleQuestionsViewModel questionFormInput { get; set; }
    private CustomerViewModel CompanySelected { get; set; }
    public bool Dense_CheckBox { get; set; }
    private bool fileNameWrong { get; set; }
    private bool audioFileNameWrong { get; set; }
    private bool formDisabled { get; set; }
    private List<string> base64Images = new();
    private List<string> base64Audios = new();
    public bool Expanded { get; set; }
    public bool IsValid { get; set; }
    public int Id { get; set; }
    // [Required]
    private int min { get; set; }
    // [Required]
    private int sec { get; set; }
    private bool hasBeenValidated { get; set; }
    private async void Cancel()
    {
        await OnCancelEvent.InvokeAsync();
    }

    bool _expanded = true;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    protected override async Task OnInitializedAsync()
    {
        questionFormInput = new CreateMultipleQuestionsViewModel
            {
                PossibleAnswers = new List<CreateAnswerViewModel>
                {
                    new CreateAnswerViewModel {
                        Label = "Answer 1",
                        Answer = string.Empty,
                    IsCorrect = false}
                },
                ImageFiles = new List<string>(),
                AudioFiles = new List<string>()
            };
        questionFormInput.PossibleAnswers.LastOrDefault().Id = questionFormInput.PossibleAnswers.LastOrDefault().Order = questionFormInput.PossibleAnswers.Count() - 1;
    }

    private EventCallback DeleteImg(string img)
    {
        base64Images.Remove(img);
        StateHasChanged();
        return EventCallback.Empty;
    }

    private void AddAnswer()
    {
        questionFormInput.PossibleAnswers.Add(new CreateAnswerViewModel
            {
                Label = $"Answer {questionFormInput.PossibleAnswers.Count + 1}",
                Answer = string.Empty,
                IsCorrect = false
            });
        questionFormInput.PossibleAnswers.LastOrDefault().Id = questionFormInput.PossibleAnswers.LastOrDefault().Order = questionFormInput.PossibleAnswers.Count() - 1;
    }

    private EventCallback CorrectAnswer(int Id)
    {
        questionFormInput.PossibleAnswers[Id].IsCorrect = true;
        return EventCallback.Empty;
    }

    private EventCallback DeleteAnswer(int Id)
    {
        questionFormInput.PossibleAnswers.RemoveAt(Id);
        return EventCallback.Empty;
    }

    private async void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
        var format = "image/png";
        var resizeImage = await file.RequestImageFileAsync(format, 640, 480);
        var buffer = new byte[resizeImage.Size];
        await resizeImage.OpenReadStream().ReadAsync(buffer);
        base64Images.Add(Convert.ToBase64String(buffer));
        // base64Images.Add("data:image/png;base64," + Convert.ToBase64String(buffer));
        StateHasChanged();
    }

    private async void UploadFiles2(IBrowserFile file)
    {
        _audios.Add(file);
        using (var stream = file.OpenReadStream())
        {
            var length = stream.Length;
            if (length <= int.MaxValue)
            {
                var result = new byte[length];
                await stream.ReadAsync(result);
                base64Audios.Add(Convert.ToBase64String(result));
                // base64Audios.Add("data:audio/mp3;base64," + Convert.ToBase64String(result));
                StateHasChanged();
            }
        }
    }

    private async void OnCancelSubmit()
    {
        await OnCancelEvent.InvokeAsync(Id);
    }

    private async void OnValidSubmit()
    {
        if (questionFormInput.PossibleAnswers is not null
            && questionFormInput.PossibleAnswers.Count() != 0)
        {
            var correctCount = questionFormInput.PossibleAnswers.Where(p => p.IsCorrect == true).Count();
            if (correctCount > 0)
            {
                // questionFormInput.Duration = new TimeOnly(00, questionFormInput.Min, questionFormInput.Sec);
                hasBeenValidated = true;
                questionFormInput.ImageFiles = base64Images;
                questionFormInput.AudioFiles = base64Audios;
                await OnValidEvent.InvokeAsync(questionFormInput);
            }
            else
                Snackbar.Add("Please add at least one correct answer", MudBlazor.Severity.Error);
        }
        else
            Snackbar.Add("Please add at least two answers", MudBlazor.Severity.Error);
    }


}

@inject IEditCustomerUseCase editCustomerUseCase
<EditForm Model="passCustomer" FormName="formCustomer" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem>
            <MudCard>
                <MudCardContent>
                    <MudGrid Spacing="16">
                        <MudItem>
                            <MudTextField Label="Name"
                                          HelperText="Max. 10 characters" Variant="Variant.Outlined"
                                          @bind-Value="passCustomer.Name" For="@(() => passCustomer.Name)" />
                            <MudTextField Label="Email"
                                          HelperText="Max. 20 characters" Variant="Variant.Outlined"
                                          @bind-Value="passCustomer.Email" For="@(() => passCustomer.Email)" />
                            <MudTextField Label="Address"
                                          HelperText="Max. 25 characters" Variant="Variant.Outlined"
                                          @bind-Value="passCustomer.Address" For="@(() => passCustomer.Address)" />
                        </MudItem>
                        <MudItem>
                            <MudTextField Label="Phone"
                                          HelperText="Max. 10 characters" Variant="Variant.Outlined"
                                          @bind-Value="passCustomer.Phone" For="@(() => passCustomer.Phone)" />
                            <br />
                            <br />
                            <MudSelect T="string" Placeholder="Select a subscription"
                                       @bind-Value="SubscriptionSelected"
                                       Label="With render fragements" Variant="Variant.Outlined">
                                @foreach (var item in subscriptions)
                                {
                                    <MudSelectItem Value="item">
                                        @item
                                        @if (item.Equals("Standard"))
                                        {
                                            <MudRating ReadOnly="true" SelectedValue="1" MaxValue="1" />
                                        }
                                        else if (item.Equals("Medium"))
                                        {
                                            <MudRating ReadOnly="true" SelectedValue="2" MaxValue="2" />
                                        }
                                        else
                                        {
                                            <MudRating ReadOnly="true" SelectedValue="3" MaxValue="3" />
                                        }
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudGrid Justify="Justify.FlexEnd">
                        <MudItem>
                            <MudButton ButtonType="ButtonType.Submit"
                                       OnClick="Cancel" Variant="Variant.Filled"
                                       Color="Color.Dark" Class="ml-auto">Cancel</MudButton>
                        </MudItem>
                        <MudItem>
                            <MudButton ButtonType="ButtonType.Submit"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary" Class="ml-auto">Add</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>
@code {
    bool success;
    private string? SubscriptionSelected { get; set; }
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public Customer passCustomer { get; set; } = new Customer();

    private void Submit()
    {
        Console.WriteLine("Submit button clicked");
        MudDialog.Close(DialogResult.Ok(true));
    }
    private void Cancel()
    {
        Console.WriteLine("Cancel button clicked");
        MudDialog.Cancel();
    }
    private List<string> subscriptions { get; set; } = new List<string>{
        "Standard",
        "Medium",
        "Premium"
    };

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private async void OnValidSubmit(EditContext context)
    {
        Console.WriteLine(SubscriptionSelected);

        success = true;
        StateHasChanged();
        var custom = new Customer
            {
                Name = passCustomer.Name,
                Email = passCustomer.Email,
                Address = passCustomer.Address,
                Phone = passCustomer.Phone,
                CreationDate = DateTime.Now,
                AttachedLicence = SubscriptionSelected != null ? SubscriptionSelected : passCustomer.AttachedLicence
            };
        Console.WriteLine(custom.Country);
        await editCustomerUseCase.ExecuteAsync(custom);
        Submit();
    }
}

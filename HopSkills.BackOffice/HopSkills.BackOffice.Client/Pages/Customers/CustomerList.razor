@page "/customers"
@inject IViewCustomerListUseCase ViewCustomerListUseCase
@inject IConfiguration config


@inject IDialogService DialogService
@inject HttpClient Http

@if (Customers is not null && Customers.Any())
{
    <MudContainer Fixed="true">
        <MudButton Size="@Size.Small"
                   Variant="@Variant.Filled"
                   StartIcon="@Icons.Material.Filled.PersonAdd"
                   Color="@Color.Primary" @onclick="OpenCreateDialogAsync">Add a new customer</MudButton>
        <br />
        <br />
        <MudDataGrid ReadOnly="false" T="CustomerViewModel" Items="@Customers"
                     Virtualize="true"
                     SortMode="SortMode.Multiple"
                     Filterable="true" StartedEditingItem="@StartedEditingItem" 
                     CommittedItemChanges="@CommittedItemChanges"
                     EditMode="@(DataGridEditMode.Form)"
                     CanceledEditingItem="@CanceledEditingItem"
                     QuickFilter="@_quickFilter">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Customers</MudText>
                <MudSpacer />
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search"
                              Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Class="mt-0"></MudTextField>

            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Name" />
                @* <PropertyColumn Property="x => x.Address" Title="Address" /> *@
                @* <PropertyColumn Property="x => x.Email" Title="Email" /> *@
                <PropertyColumn Property="x => x.Country" Title="Country" />
                <PropertyColumn Property="x => x.CreatedOn" Title="Created On" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Size="@Size.Small" Color="@Color.Primary" Icon="@Icons.Material.Outlined.Edit"
                                           OnClick="@context.Actions.StartEditingItemAsync" Variant="@Variant.Filled" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                           Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="CustomerViewModel" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
}

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>

@code {
    private string? serviceEndpoint;
    private string? backendUrl;

    List<CustomerViewModel>? Customers = new List<CustomerViewModel>();
    private bool _readOnly;
    private string _searchString;
    // quick filter - filter globally across multiple columns with the same input
    private Func<CustomerViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Address.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Country} {x.Email}".Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
    private List<string> _events = new();
    void StartedEditingItem(CustomerViewModel item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(CustomerViewModel item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(CustomerViewModel item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    private async Task OpenCreateDialogAsync()
    {
        var options = new DialogOptions { BackgroundClass = "my-custom-class" };

        var dialog = DialogService.Show<AddCustomerComponent>("Create a new customer", options);

        var result = await dialog.Result;

        if (!result.Canceled)
            await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        backendUrl = config.GetValue<string>("BackendUrl");

        serviceEndpoint = $"{backendUrl}/api/Customer/GetAll";
        if (!string.IsNullOrEmpty(serviceEndpoint))
        {
            Customers = await Http.GetFromJsonAsync<List<CustomerViewModel>>(serviceEndpoint);
        }
        // Customers = await ViewCustomerListUseCase.ExecuteAsync();
    }
}

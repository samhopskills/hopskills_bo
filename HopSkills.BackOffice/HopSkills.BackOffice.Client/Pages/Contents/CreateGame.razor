@page "/creategame"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations
@using FluentValidation
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IConfiguration config
@inject IJSRuntime JSRuntime
@implements IDisposable
<style>
    .outer-container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding: 20px;
        max-width: 1200px; /* Réduction de la largeur maximale */
        margin: 0 auto; /* Centrer le conteneur */
        min-height: 80vh; /* Réduction de la hauteur minimale */
        max-height: 800px; /* Ajout d'une hauteur maximale */
        overflow-y: auto; /* Ajout d'un défilement vertical si nécessaire */
    }

    .quill-editor-container {
        display: flex;
        flex-direction: column;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    #toolbar {
        border-bottom: 1px solid #ccc;
        padding: 8px;
    }

    #quillEditor {
        min-height: 200px;
        background-color: white;
    }

    .ql-toolbar.ql-snow {
        border: none !important;
    }

    .ql-container.ql-snow {
        background-color: white;
    }

    .ql-toolbar.ql-snow + .ql-container.ql-snow {
        height: calc(200px - 42px); /* 42px est la hauteur approximative de la barre d'outils */
        overflow-y: auto;
    }


    .quiz-container {
        display: flex;
        flex-direction: row;
        justify-content: center;
        gap: 20px;
        max-width: 1300px;
        width: 100%;
    }

    .quiz-form-container {
        display: flex;
        align-items: stretch;
        margin-bottom: 20px;
        background-color: #ffffff;
        border-radius: 8px;
        /*box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 20px;
            flex: 0 1 792px; /* Augmenté de 720px à 792px (10% de plus) */ */
    }

    /*  .quiz-info-card {
            width: 100%;
            height: 100%;
            overflow-y: auto;
            overflow-x: hidden;
            padding: 15px;
            box-sizing: border-box;
            background-color: transparent !important;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        } */

    .page-content {
        position: relative;
        width: 100%;
        overflow-x: hidden; /* Prevent horizontal scrollbar */
    }

    .questions-container {
        overflow-y: auto;
        flex-grow: 1;
        padding-right: 10px; /* Espace pour la barre de défilement */
        max-height: calc(100vh - 200px);
    }

    .question-container {
        display: flex;
        align-items: stretch;
        margin-bottom: 20px;
        width: 100%; /* Utilise toute la largeur disponible */
    }

    .question-form {
        flex-grow: 1;
        margin-right: 10px;
    }

    .nav-buttons {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 10px;
    }

    .nav-button {
        padding: 4px;
        min-width: 0;
        width: 36px;
        height: 36px;
    }


    .add-image-container {
        border: 2px dashed #ccc;
        border-radius: 8px;
        height: 200px;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 20px;
        overflow: hidden;
    }

    .add-image-icon {
        font-size: 48px;
        color: #007bff;
    }



    .question-item {
        display: flex;
        align-items: center;
        padding: 8px;
        background-color: #f0f0f0;
        transition: background-color 0.3s ease;
        border-radius: 16px;
    }

        .question-item:hover {
            background-color: #e0e0e0;
        }

    .expansion-panel-wrapper {
        flex-grow: 1;
        margin-right: 8px;
    }

    .mud-expand-panel {
        box-shadow: none !important;
        border: 1px solid #e0e0e0;
        border-radius: 16px !important;
        overflow: hidden;
    }



        .mud-expand-panel:last-child {
            margin-bottom: 0 !important; /* Suppression de la marge pour le dernier panneau */
        }

    .mud-expand-panel-header {
        padding: 0 !important;
        border-radius: 16px !important;
    }

    .mud-expand-panel-content {
        padding: 8px !important;
        background-color: #ffffff;
        border-bottom-left-radius: 16px !important;
        border-bottom-right-radius: 16px !important;
    }

    .mud-expansion-panels > .mud-expand-panel {
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        overflow: hidden;
    }

    .quiz-info-card {
        display: flex;
        flex-direction: column;
        gap: 16px; /* Espace entre les panneaux */
        padding: 10px;
        /* max-height: calc(50vh - 64px); /* Adjust based on your header height */ */
        /* overflow-y: auto; */
    }


    .uniform-panel {
        height: 250px; /* Hauteur fixe pour tous les panneaux */
        width: 100%; /* Utilise toute la largeur du conteneur parent */
        overflow: hidden; /* Cache tout contenu dépassant */
    }

    .panel-content {
        height: calc(100% - 48px); /* Hauteur totale moins la hauteur de l'en-tête */
        overflow-y: auto; /* Défilement vertical si le contenu dépasse */
        padding: 8px;
    }

    .panel-header {
        height: 48px; /* Hauteur fixe pour l'en-tête */
        display: flex;
        align-items: center;
        padding: 0 16px;
        overflow: hidden;
    }

    .question-text {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        flex-grow: 1;
    }

    .question-info {
        display: flex;
        align-items: center;
        white-space: nowrap;
        margin-left: 8px;
    }

    .question-actions {
        display: flex;
        justify-content: flex-end;
        padding: 8px;
    }

    .quiz-info-card-container {
        transition: max-width 0.3s ease-in-out, opacity 0.3s ease-in-out;
        max-width: 450px;
        width: 100%;
        opacity: 1;
        flex-shrink: 0;
    }

        .quiz-info-card-container.hidden {
            max-width: 0;
            opacity: 0;
        }


    .toggle-button-container {
        position: relative;
        z-index: 2;
        flex-shrink: 0;
    }

    .toggle-button {
        position: absolute;
        left: -20px; /* Ajustez cette valeur selon vos besoins */
        top: 50%;
        transform: translateY(-50%);
    }

    .mud-expansion-panel {
        margin-bottom: 8px;
    }


    .questions-container::-webkit-scrollbar {
        width: 6px;
    }

    .questions-container::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .questions-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }

        .questions-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

    .mud-expand-panel {
        box-shadow: none !important;
        border: 1px solid #e0e0e0;
    }

    .mud-expand-panel-header {
        padding: 0 !important;
    }

    .mud-expand-panel-content {
        padding: 8px !important;
    }

    @@media (max-width: 600px) {
        .question-info {
            display: none;
        }
    }

    @@media (max-width: 1300px) { /* Ajusté pour le nouveau max-width */
        .quiz-container {
            flex-direction: column;
            align-items: center;
        }

        .quiz-form-container,
        .quiz-info-card {
            width: 100%;
            /* max-width: 720px; /* Ajusté pour correspondre à la nouvelle largeur du formulaire */ */
        }

        .quiz-info-card {
            max-height: none; /* Supprime la limite de hauteur en mode responsive */
        }
    }

    @@media (max-width: 768px) {
        .quiz-container {
            flex-direction: column;
        }

        .quiz-info-card-container {
            max-width: 100%;
        }

        .toggle-button-container {
            display: none; /* Cache le bouton sur les petits écrans */
        }
    }

    .side-menu {
        position: fixed;
        top: 0;
        right: 0;
        /* height: 50vh; */
        width: 400px;
        z-index: 1300;
        transition: transform 0.3s ease-in-out;
        background-color: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        box-shadow: -2px 0 10px rgba(0,0,0,0.1);
        border-top-left-radius: 10px;
        border-bottom-left-radius: 10px;
        overflow-y: auto;
    }

        .side-menu.closed {
            transform: translateX(100%);
        }


    .toggle-button-summary {
        position: fixed;
        top: 34%; /* Aligné avec le centre du MudDrawer */
        right: 400px; /* Aligné avec le bord gauche du MudDrawer ouvert */
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out, right 0.3s ease-in-out;
        z-index: 1301;
        background-color: rgba(255, 255, 255, 0.5) !important; /* Fond semi-transparent */
        border: 1px solid rgba(224, 224, 224, 0.5);
        border-right: none;
        border-top-right-radius: 4px;
        border-bottom-right-radius: 4px;
        padding: 8px;
        box-shadow: -2px 0 5px rgba(0,0,0,0.1);
    }

        .toggle-button-summary.closed {
            right: 10%;
            transform: translateX(0);
        }

    .side-menu-content {
        color: #333; /* Couleur de texte foncée pour la lisibilité */
    }

        .side-menu-content .mud-typography {
            text-shadow: 0 0 5px rgba(255,255,255,0.5); /* Ombre légère pour améliorer la lisibilité */
        }

    .main-content {
        transition: none;
        width: 100%;
    }

        .main-content.menu-open {
            margin-right: 300px; /* Ajuster selon la largeur du menu */
        }


    .quiz-title {
        font-weight: bold;
        margin-right: auto;
        margin-left: 3%;
    }

    .delete-image-button {
        position: absolute;
        top: 8px;
        right: 8px;
        background-color: rgba(255, 255, 255, 0.7);
        border-radius: 50%;
        padding: 4px;
        transition: background-color 0.3s ease;
    }

        .delete-image-button:hover {
            background-color: rgba(255, 255, 255, 0.9);
        }

    .cursor-pointer {
        cursor: pointer;
    }

    .image-container {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
    }

        .image-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .delete-button {
        position: absolute;
        top: 8px;
        right: 8px;
        background-color: rgba(255, 255, 255, 0.7) !important;
        border-radius: 50%;
        z-index: 2;
    }

    .mud-paper {
        position: relative;
    }

    /* Ajoutez un media query pour gérer l'affichage sur mobile */
    @@media (max-width: 768px) {
        .nav-buttons {
            position: static; /* Revient à une position normale sur mobile */
            flex-direction: row; /* Affiche les boutons horizontalement */
            justify-content: center;
            width: 100%;
            margin: 10px 0;
        }

        .question-container {
            margin-left: 0;
            width: 100%;
        }
    }

    .back-button-container {
        position: fixed;
        left: 90px; /* Ajustez selon la largeur du MudDrawer (400px) + un peu d'espace */
        top: 20%;
        transform: translateY(-50%);
        z-index: 1000;
        background-color: lightgray;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-radius: 4px;
    }

        /* Style pour le bouton lui-même */
        .back-button-container .mud-button {
            z-index: 1000; /* Assure que le bouton a le même z-index */
            position: relative;
            background-color: lightgray;
        }

    * Media query pour le responsive */
    @@media (max-width: 768px) {
        .back-button-container

    {
        position: static;
        transform: none;
        margin: 10px 0;
    }

    }
</style>

<div class="page-content">
    @if (isLoading)
    {
        <MudPaper Class="pa-4">
            <MudGrid>
                <MudItem xs="12">
                    <MudSkeleton Height="200px" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSkeleton Height="40px" />
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
    else
    {
        <div class="@($"main-content {(isMenuOpen ? "menu-open" : "")}")">
            @if (form1Validate)
            {
                <style>
                   
                </style>
                <div class="d-flex justify-space-between align-center mb-2">
                    <MudText Typo="Typo.h6" Class="quiz-title">
                        <MudTextField T="string" Required="true" @bind-Value="@InputGame.Title"
                                      Style="font-size: 1.25rem; font-weight: 500;"
                                      Placeholder="Add a title to the game"
                                      UserAttributes="@(new() { { "aria-required", "true" } } )"
                                      For="@(() => InputGame.Title)" Variant="Variant.Text" />
                    </MudText>
                    <div class="d-flex justify-end align-center" style="margin-top:5%; margin-right:5%; ">
                        <MudButton ButtonType="ButtonType.Button"
                                   OnClick="(() => OnValidSubmit(null))"
                                   Variant="Variant.Text" Color="Color.Primary"
                                   EndIcon="@Icons.Material.Filled.NavigateNext">Next</MudButton>
                    </div>
                </div>
                <div class="content-wrapper">
                    <div class="outer-container">
                    <div class="quiz-container">
                        <div class="quiz-form-container">
                            <MudPaper Elevation="3" Class="@($"pa-4 question-paper")">
                                <EditForm Model="@InputGame" OnValidSubmit="OnValidSubmit">
                                    <DataAnnotationsValidator />
                                    <MudGrid>
                                        <MudItem xs="12">
                                                <MudPaper Height="200px" Width="100%" Outlined="true"
                                                          Class="d-flex justify-center align-center cursor-pointer"
                                                          @onclick="@(() => _fileUpload.OpenFilePickerAsync())">
                                                    @if (string.IsNullOrEmpty(InputGame.Image?.Content))
                                                    {
                                                        <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                                                       @ref="@_fileUpload"
                                                                       @bind-Files="_model.Files"
                                                                       For="@(() => _model.Files)"
                                                                       AppendMultipleFiles="false"
                                                                       Hidden="true"
                                                                       InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                                                       InputStyle="opacity:0"
                                                                       ErrorText="@string.Empty"
                                                                       tabindex="-1"
                                                                       Accept=".jpg,.jpeg,.png"
                                                                       @ondrop="@ClearDragClass"
                                                                       @ondragenter="@SetDragClass"
                                                                       @ondragleave="@ClearDragClass"
                                                                       @ondragend="@ClearDragClass"
                                                                       OnFilesChanged="LoadFiles">
                                                        </MudFileUpload>
                                                        <div class="d-flex flex-column align-center justify-center h-100 w-100">
                                                            <MudIcon Icon="@Icons.Material.Filled.AddPhotoAlternate" Class="add-image-icon mb-2" />
                                                            <MudText Align="Align.Center">Ajouter une image</MudText>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="image-container">
                                                            <img src="@base64data" alt="Image du jeu" />
                                                            <MudIconButton Icon="@Icons.Material.Filled.Close"
                                                                           Color="Color.Error"
                                                                           Size="Size.Small"
                                                                           Class="delete-button"
                                                                           OnClick="DeleteImage" />
                                                        </div>
                                                    }
                                                </MudPaper>

                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudSelect T="string" Required="true" For="@(() => InputGame.Theme)"
                                                       @bind-Value="@InputGame.Theme" Placeholder="Select a Theme"
                                                       UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                       Label="Theme related to" Variant="Variant.Outlined"
                                                       AnchorOrigin="Origin.BottomCenter">
                                                <MudSelectItem T="string" Value="@("Theme A")" />
                                                <MudSelectItem T="string" Value="@("Theme B")" />
                                                <MudSelectItem T="string" Value="@("Theme C")" />
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudSelect T="string" Required="true" For="@(() => InputGame.DifficultyLevel)"
                                                       @bind-Value="@InputGame.DifficultyLevel" Placeholder="Select a difficulty level"
                                                       UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                       Label="Difficulty level" Variant="Variant.Outlined"
                                                       AnchorOrigin="Origin.BottomCenter">
                                                <MudSelectItem T="string" Value="@("Easy")" />
                                                <MudSelectItem T="string" Value="@("Medium")" />
                                                <MudSelectItem T="string" Value="@("Hard")" />
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudSelect T="string" Required="true" For="@(() => InputGame.ElligibleSub)"
                                                       @bind-Value="@InputGame.ElligibleSub" Placeholder="Select a Subscription"
                                                       UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                       Label="Eligible subscription" Variant="Variant.Outlined"
                                                       AnchorOrigin="Origin.BottomCenter">
                                                <MudSelectItem T="string" Value="@("Sub A")" />
                                                <MudSelectItem T="string" Value="@("Sub B")" />
                                                <MudSelectItem T="string" Value="@("Sub C")" />
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudSelect @bind-Value="Subscription" 
                                            Label="Abonnement" Variant="Variant.Outlined">
                                                <MudSelectItem Value="@("Quel abonnement y aura accès ?")">Quel abonnement y aura accès ?</MudSelectItem>
                                            </MudSelect>
                                        </MudItem>
                                        @if(Games is not null && Games.Count != 0)
                                        {
                                            <MudItem xs="12" sm="6">
                                            <MudSelect T="string" Required="false"
                                                       @bind-Value="@InputGame.PriorGame" Placeholder="Select a game"
                                                       Label="Game to complete before" Variant="Variant.Outlined"
                                                       AnchorOrigin="Origin.BottomCenter">
                                                @foreach (var item in Games)
                                                {
                                                    <MudSelectItem T="string" Value="@(item.Title)" />
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        }
                                    </MudGrid>
                                </EditForm>
                            </MudPaper>
                        </div>
                    </div>
                </div>
                    <div class="description-container">
                        @if (isLoading)
                        {
                            <MudPaper Elevation="3" Class="pa-4">
                                <MudSkeleton Animation="Animation.Wave" Height="24px" Width="120px" Class="mb-2" />
                                <MudSkeleton Animation="Animation.Wave" Height="200px" Class="mb-2" />
                                <MudSkeleton Animation="Animation.Wave" Height="16px" Width="250px" />
                            </MudPaper>
                        }
                        else
                        {
                            <MudPaper Elevation="3" Class="pa-4">
                                <MudText Typo="Typo.subtitle1" Class="mb-2">Description</MudText>
                                <div class="quill-editor-wrapper">
                                    <div id="quillEditor" style="min-height: 200px;"></div>
                                </div>
                                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                                    Describe the content and objectives of your game
                                </MudText>
                            </MudPaper>
                        }
                    </div>
                    <style>
                        .content-wrapper {
                            display: flex;
                            flex-direction: column;
                            gap: 8px; /* Réduit l'espace entre les éléments */
                            width: 100%;
                            max-width: 1200px;
                            margin: 0 auto;
                        }

                        .description-container {
                            width: 100%;
                            padding: 0 20px;
                            margin-top: -120px; /* Ajoute une marge négative pour rapprocher davantage */
                        }

                        .quill-editor-wrapper {
                            border: 1px solid rgba(0,0,0,0.12);
                            border-radius: 4px;
                        }
                    </style>
                </div>
            }
            @if (form2Validate)
            {
                <MudContainer MaxWidth="MaxWidth.Large" Class="d-flex flex-column">
                    <div class="back-button-container">
                        <MudButton ButtonType="ButtonType.Button"
                                   OnClick="GoBackToForm1"
                                   Variant="Variant.Text"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.NavigateBefore">
                            Back
                        </MudButton>
                    </div>
                    <MudGrid>
                        @if (InputGame.multipleQuestions?.Any() == true)
                        {
                            @for (int i = 0; i < InputGame.multipleQuestions.Count; i++)
                            {
                                var index = i;
                                <MudItem xs="12">
                                    <div class="question-container">
                                        <div class="question-form" @ref="questionRefs[index]" id="@($"question-{index}")">
                                            <div class="d-flex justify-space-between align-center mb-2">
                                                <MudText Typo="Typo.h6" Class="quiz-title">@($"Quiz {index + 1}")</MudText>
                                                <MudTooltip Text="Quiz Duration">
                                                    <div class="d-flex align-center">
                                                        <MudNumericField T="int"
                                                                         Required="true" ValueChanged="@((int val) => OnMinChanged(index, val))"
                                                                         Label="Min"
                                                                         Value="@InputGame.multipleQuestions[index].Min"
                                                                         Min=0
                                                                         Max=10
                                                                         Immediate="true"
                                                                         Style="width: 60px; margin-right: 4px;"
                                                                         Variant="Variant.Text"
                                                                         Density="Density.Compact"
                                                                         HideSpinButtons="true" />
                                                        <MudText Class="mx-1">:</MudText>
                                                        <MudNumericField T="int" Value="InputGame.multipleQuestions[index].Sec"
                                                                         Label="Sec"
                                                                         ValueChanged="@((int val) => OnSecChanged(index, val))"
                                                                         Min="0"
                                                                         Max="59"
                                                                         Immediate="true"
                                                                         Style="width: 60px;"
                                                                         Variant="Variant.Text"
                                                                         Density="Density.Compact"
                                                                         HideSpinButtons="true" />
                                                    </div>
                                                </MudTooltip>
                                                <MudTooltip Text="Experience Points" Class="ml-4">
                                                    <MudNumericField AdornmentIcon="@Icons.Material.Outlined.Star" 
                                                    Adornment="Adornment.End" Required="true" T="int" ValueChanged="@((int val) => OnXpChanged(index, val))"
                                                                     Min=1 HideSpinButtons="true"
                                                                     Value="@InputGame.multipleQuestions[index].Xperience"
                                                                     Style="width: 60px;" Class="mx-1" />
                                                </MudTooltip>
                                                <div class="d-flex justify-end align-center">
                                                    <MudFileUpload T="IBrowserFile" Accept=".png,.jpg,.jpeg" FilesChanged="((e) => UploadFiles(e, index))">
                                                        <ActivatorContent>
                                                            <MudIconButton Size="Size.Medium"
                                                                           Icon="@Icons.Material.Outlined.Image" />
                                                        </ActivatorContent>
                                                    </MudFileUpload>
                                                    <MudFileUpload T="IBrowserFile" Accept=".mp3,.wav" FilesChanged="((e) => UploadFiles2(e, index))">
                                                        <ActivatorContent>
                                                            <MudTooltip Text="Upload Audio">
                                                                <MudIconButton Size="Size.Medium"
                                                                               Icon="@Icons.Material.Outlined.AudioFile" />
                                                            </MudTooltip>
                                                        </ActivatorContent>
                                                    </MudFileUpload>
                                                    <MudTooltip Text="Delete the page">
                                                        <MudIconButton Size="Size.Medium" OnClick="() => CreateFormCanceled(index)"
                                                                       Icon="@Icons.Material.Outlined.Delete" />
                                                    </MudTooltip>
                                                    <MudTooltip Text="Add a quiz">
                                                        <MudIconButton Size="Size.Medium" OnClick="AddNewQuestion"
                                                                       Icon="@Icons.Material.Outlined.NoteAdd" />
                                                    </MudTooltip>
                                                    <MudTooltip Text="Duplicate">
                                                        <MudIconButton Size="Size.Medium" OnClick="() => CreateFormCopy(index)"
                                                                       Icon="@Icons.Material.Outlined.ContentCopy" />
                                                    </MudTooltip>
                                                </div>
                                            </div>
                                            <AddQuestionFormComponent @ref="questionComponents[index]"
                                                                    questionFormInput="InputGame.multipleQuestions[index]"
                                                                    OnValidEvent="() => CreateFormValid(index)"
                                                                    IsSelected="selectedQuestionIndex == index"
                                                                    OnSelect="() => SelectQuestion(index)"
                                                                    QuizTitle="@($"Quiz {index + 1}")" />
                                        </div>
                                        <div class="nav-buttons">
                                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp"
                                                           Color="Color.Primary"
                                                           OnClick="() => NavigateToPrevious(index)"
                                                           Disabled="@(index == 0)"
                                                           Class="nav-button" />
                                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown"
                                                           Color="Color.Primary"
                                                           OnClick="() => NavigateToNext(index)"
                                                           Disabled="@(index == InputGame.multipleQuestions.Count - 1)"
                                                           Class="nav-button" />
                                        </div>
                                    </div>
                                </MudItem>
                            }
                        }
                        <MudItem xs="12" Class="d-flex justify-center">
                            <MudButton OnClick="AddNewQuestion"
                                     Variant="Variant.Outlined"
                                     StartIcon="@Icons.Material.Filled.Add"
                                     Color="Color.Dark">
                                Add a new form
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudContainer>
            }
        </div>

        <MudDrawer @bind-Open="@isMenuOpen"
           Anchor="Anchor.Right"
           Elevation="1"
           OpenMiniOnHover="true"
           Variant="@DrawerVariant.Mini"
           Width="400px"
           Class="side-menu">
    <div class="side-menu-content">
        <MudTooltip Text="Return to Game Info" Placement="Placement.End">
            <MudDrawerHeader @onclick="GoBackToForm1" Class="clickable-header">
                <MudGrid>
                    <MudItem xs="12" Class="d-flex align-center">
                        <MudAvatar Style="margin-right: 16px; width: 60px; height: 60px; object-fit: cover;">
                            @if (!string.IsNullOrEmpty(base64data))
                            {
                                <MudImage Src="@base64data" Alt="Quiz Image" Width="60" Height="60" ObjectFit="ObjectFit.Cover" />
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Image" />
                            }
                        </MudAvatar>
                        <div>
                            <MudText Typo="Typo.h6">@InputGame.Title</MudText>
                            <MudText Typo="Typo.body2">@InputGame.Theme</MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="12" Class="d-flex justify-space-between mt-2">
                        <MudText Typo="Typo.body2">
                            <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Class="mr-1" />
                           Duration: @TimeSpan.FromSeconds(InputGame.TotalDuration).Minutes  min @TimeSpan.FromSeconds(InputGame.TotalDuration).Seconds s
                        </MudText>
                        <MudText Typo="Typo.body2">
                            <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Class="mr-1" />
                            Points: @(InputGame.multipleQuestions?.Sum(q => q.Xperience) ?? 0) Xp
                        </MudText>
                    </MudItem>
                </MudGrid>
            </MudDrawerHeader>
        </MudTooltip>
        <MudDrawerContainer>
            <div class="quiz-info-card">
                <!-- Questions summary with drag and drop -->
                @if (InputGame?.multipleQuestions != null)
                {
                    @for (int i = 0; i < InputGame.multipleQuestions.Count; i++)
                    {
                        var index = i;
                        var question = InputGame.multipleQuestions[i];
                        <div class="draggable-item" 
                             draggable="true"
                             @key="question.UniqueId"
                             @ondragstart="@(() => HandleDragStart(index))"
                             @ondragover:preventDefault
                             @ondragend="@HandleDragEnd"
                             @ondrop="@(() => HandleDrop(index))"
                             @onclick="@(() => SelectQuestionFromSummary(index))">
                            <MudExpansionPanel Class="@(selectedQuestionIndex == index ? "selected-question" : "")">
                                <TitleContent>
                                    <div class="panel-header">
                                        <MudIcon Icon="@Icons.Material.Filled.DragIndicator"
                                                 Size="Size.Small"
                                                 Class="mr-2 drag-handle" />
                                        <span class="question-text">@TruncateText(question.Question, 5)</span>
                                        <div class="question-info">
                                            <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Class="mr-1" />
                                            <span class="mr-2">@question.Xperience Xp</span>
                                            <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Class="mr-1" />
                                                    @if (@question.Duration.HasValue)
                                                    {
                                                                                                        <span>@question.Duration.Value.Minutes min</span>
                                                    }
                                                    else
                                                    {
                                                        <span>0 min</span>
                                                    }
                                        </div>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <div class="panel-content">
                                        <MudList T="CreateAnswerViewModel" Dense="true" DisablePadding="true">
                                            @foreach (var answer in question.PossibleAnswers)
                                            {
                                                <MudListItem IconColor="@(answer.IsCorrect ? Color.Success : Color.Error)"
                                                            Icon="@(answer.IsCorrect ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel)">
                                                    @answer.Answer
                                                </MudListItem>
                                            }
                                        </MudList>
                                    </div>
                                </ChildContent>
                            </MudExpansionPanel>
                        </div>
                    }
                }
            </div>
            <MudPaper Class="d-flex justify-center pa-4" Elevation="0">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                          OnClick="@(() => SaveGame(0))" Class="mr-2">Save as Draft</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Success" 
                          OnClick="@(() => SaveGame(1))">Publish</MudButton>
            </MudPaper>
        </MudDrawerContainer>
    </div>
</MudDrawer>

    }
</div>



@code {
    private bool isLoading = false;
    private bool isMenuOpen = false;
    private bool _form1Validate = true;
    public bool form1Validate
    {
        get => _form1Validate;
        set
        {
            if (_form1Validate != value)
            {
                _form1Validate = value;
                if (_form1Validate)
                {
                    InvokeAsync(InitializeQuill);
                }
            }
        }
    }
    private bool form2Validate = false;
    private CreateGameViewModel InputGame = new();
    private Model _model = new();
    private string base64data = string.Empty;
    private ElementReference[] questionRefs;
    private AddQuestionFormComponent[] questionComponents;
    private int? selectedQuestionIndex;
    private bool _isJsInitialized = false;
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private const string FileContent = "this is content";
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private int? draggedIndex;
    private string? backendUrl;
    private string Subscription { get; set; } = "Quel abonnement y aura accès ?";
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authenticationState { get; set; }
    private ClaimsPrincipal authenticatedUser { get; set; }
    private List<GameViewModel> Games { get; set; } = new List<GameViewModel>();
    private string getPriorGamesEndpoint { get; set; }
    private string? serviceEndpoint;
    EditContext InputGameContext;

    private const int MaxImageSizeBytes = 5 * 1024 * 1024; // 5 MB
    private const int MaxAudioSizeBytes = 10 * 1024 * 1024;
    private async Task OpenFileInput(string inputId)
    {
        await JSRuntime.InvokeVoidAsync("openFileInput", inputId);
    }

    private void OnMinChanged(int index, int min)
    {
        var oldD = InputGame.multipleQuestions[index].Duration;
        InputGame.multipleQuestions[index].Min = min;
        InputGame.multipleQuestions[index].Duration = new TimeSpan(0, min, oldD.Value.Seconds);
        InputGame.TotalDuration = InputGame.multipleQuestions.Sum(m => m.Duration.Value.TotalSeconds);
    }

    private void OnSecChanged(int index, int sec)
    {
        var oldD = InputGame.multipleQuestions[index].Duration;
        InputGame.multipleQuestions[index].Sec = sec;
        InputGame.multipleQuestions[index].Duration = new TimeSpan(0, oldD.Value.Minutes, sec);
        InputGame.TotalDuration = InputGame.multipleQuestions.Sum(m => m.Duration.Value.TotalSeconds);
    }

    private void OnXpChanged(int index, int xp)
    {
        InputGame.multipleQuestions[index].Xperience = xp;
        InputGame.TotalXperience = InputGame.multipleQuestions.Sum(m => m.Xperience);
    }

    private async Task UploadFiles(IBrowserFile file, int index)
    {
        if (file.Size > MaxImageSizeBytes)
        {
            Snackbar.Add($"File {file.Name} is too large. Max size is 5 MB.", MudBlazor.Severity.Error);
            return;
        }
        if (InputGame.multipleQuestions[index].ImageFiles is null)
            InputGame.multipleQuestions[index].ImageFiles = new List<GameFileModel>();
        var format = "image/png";
        var resizeImage = await file.RequestImageFileAsync(format, 640, 480);
        var buffer = new byte[resizeImage.Size];
        await resizeImage.OpenReadStream().ReadAsync(buffer);
        InputGame.multipleQuestions[index].ImageFiles.Add(new GameFileModel
            {
                Content = Convert.ToBase64String(buffer),
                Delete = false
            });
        StateHasChanged();
    }

    private async Task UploadFiles2(IBrowserFile file, int index)
    {
        if (file.Size > MaxImageSizeBytes)
        {
            Snackbar.Add($"File {file.Name} is too large. Max size is 5 MB.", MudBlazor.Severity.Error);
            return;
        }
        if (InputGame.multipleQuestions[index].AudioFiles is null)
            InputGame.multipleQuestions[index].AudioFiles = new List<GameFileModel>();
        using (var stream = file.OpenReadStream(MaxAudioSizeBytes))
        {
            var buffer = new byte[file.Size];
            await stream.ReadAsync(buffer);
            InputGame.multipleQuestions[index].AudioFiles.Add(new GameFileModel
                {
                    Content = Convert.ToBase64String(buffer),
                    Delete = false
                });
        }
        StateHasChanged();
    }

    private void HandleDragStart(int index)
    {
        draggedIndex = index;
    }

    private void HandleDragEnd()
    {
        draggedIndex = null;
    }

    private async Task HandleDrop(int index)
    {
        if (draggedIndex.HasValue && draggedIndex.Value != index)
        {
            var item = InputGame.multipleQuestions[draggedIndex.Value];
            InputGame.multipleQuestions.RemoveAt(draggedIndex.Value);
            InputGame.multipleQuestions.Insert(index, item);
            UpdateQuestionOrder();

            if (selectedQuestionIndex == draggedIndex)
            {
                selectedQuestionIndex = index;
            }
            StateHasChanged();
        }
    }

    private void UpdateQuestionOrder()
    {
        for (int i = 0; i < InputGame.multipleQuestions.Count; i++)
        {
            InputGame.multipleQuestions[i].CountId = i + 1;
        }
    }

    private async Task SelectQuestionFromSummary(int index)
    {
        if (form1Validate)
        {
            form1Validate = false;
            form2Validate = true;
            StateHasChanged();
        }
        await SelectAndFocusQuestion(index);
    }

    private void GoBackToForm1()
    {
        form1Validate = true;
        form2Validate = false;
        StateHasChanged();
    }

    private void SetDragClass()
       => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private async void ClearAsync()
    {
        InputGame.Image = new CreateGameImageViewModel();
        _fileUpload?.ClearAsync();
    }

    private async Task InitializeQuill()
    {
        // Attendre que le DOM soit mis à jour
        await Task.Delay(200);
        await JSRuntime.InvokeVoidAsync("initQuill", objRef);
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            InputGame = new CreateGameViewModel
            {
                multipleQuestions = new List<CreateMultipleQuestionsViewModel>()
            };
            InputGameContext = new(InputGame);
            InputGameContext.OnFieldChanged += InputGameContext_OnFieldChanged;
            Games = new List<GameViewModel>();
            if (authenticationStateTask is not null)
            {
                authenticationState = await authenticationStateTask;
                if (authenticatedUser is null)
                    authenticatedUser = authenticationState?.User;
                InputGame.Creator = authenticatedUser.Identity.Name;
            }
            if (authenticatedUser.IsInRole("Admin"))
                getPriorGamesEndpoint = $"{backendUrl}/api/Game/GetAll";
            else
            {
                var user = await Http.GetFromJsonAsync<UserViewModel>($"{backendUrl}/api/User/userdetails/{authenticatedUser.Identity.Name}");
                getPriorGamesEndpoint = $"{backendUrl}/api/Game/getgamesbycustomer/{user.Company}";
            }
            Games = await Http.GetFromJsonAsync<List<GameViewModel>>(getPriorGamesEndpoint);
            InitializeArrays();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InputGameContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        StateHasChanged();
    }
    private DotNetObjectReference<CreateGame>? objRef;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("eval", @"

            window.initQuill = function(dotnetHelper) {
                // Nettoyage de l'ancienne instance si elle existe
                var existingEditor = document.querySelector('#quillEditor');
                if (existingEditor) {
                    existingEditor.innerHTML = window.quillContent || '';
                }

                var options = {
                    theme: 'snow',
                    modules: {
                        toolbar: [
                            ['bold', 'italic', 'underline', 'strike'],
                            ['blockquote', 'code-block'],
                            [{ 'header': 1 }, { 'header': 2 }],
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                            [{ 'script': 'sub'}, { 'script': 'super' }],
                            [{ 'indent': '-1'}, { 'indent': '+1' }],
                            [{ 'color': [] }, { 'background': [] }],
                            ['clean']
                        ]
                    }
                };

                // Vérifier si un éditeur Quill existe déjà
                var existingQuill = Quill.find(document.querySelector('#quillEditor'));
                if (existingQuill) {
                    existingQuill.off('text-change');
                }

                // Créer une nouvelle instance
                window.quill = new Quill('#quillEditor', options);

                // Restaurer le contenu précédent s'il existe
                if (window.quillContent) {
                    window.quill.root.innerHTML = window.quillContent;
                }

                window.quill.on('text-change', function() {
                    window.quillContent = window.quill.root.innerHTML;
                    dotnetHelper.invokeMethodAsync('UpdateDescription', window.quillContent);
                });

                window.getQuillContent = function() {
                    return window.quill ? window.quill.root.innerHTML : '';
                };
            }

            window.scrollToElement = function(elementId) {
                var element = document.getElementById(elementId);
                if (element) {
                    element.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            };

            window.enableDragging = function(element) {
                if (element) {
                    element.draggable = true;
                }
            };

            window.disableDragging = function(element) {
                if (element) {
                    element.draggable = false;
                }
            };

            window.handleDragStart = function(e) {
                if (e && e.target) {
                    e.dataTransfer.effectAllowed = 'move';
                    let draggableItem = e.target.closest('.draggable-item');
                    if (draggableItem) {
                        draggableItem.classList.add('dragging');
                    }
                }
            };

            window.handleDragOver = function(e) {
                if (e && e.preventDefault) {
                    e.preventDefault();
                }
                if (e && e.dataTransfer) {
                    e.dataTransfer.dropEffect = 'move';
                }
                return false;
            };

            window.handleDrop = function(e) {
                if (e && e.stopPropagation) {
                    e.stopPropagation();
                }
                let draggingElement = document.querySelector('.dragging');
                if (draggingElement) {
                    draggingElement.classList.remove('dragging');
                }
                return false;
            };
        ");
            await InitializeQuill();
            _isJsInitialized = true;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    [JSInvokable]
    public Task<string> GetInitialDescription()
    {
        return Task.FromResult(InputGame?.Description ?? string.Empty);
    }

    [JSInvokable]
    public Task UpdateDescription(string content)
    {
        if (InputGame != null)
        {
            InputGame.Description = content;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        if (InputGame.Image == null)
            InputGame.Image = new();

        var format = e.File.ContentType;
        var resizeImage = await e.File.RequestImageFileAsync(format, 300, int.MaxValue);
        var buffer = new byte[resizeImage.Size];
        await resizeImage.OpenReadStream().ReadAsync(buffer);
        InputGame.Image.Content = Convert.ToBase64String(buffer);
        base64data = $"data:{format};base64,{InputGame.Image.Content}";
    }

    private async Task DeleteImage()
    {
        InputGame.Image = null;
        base64data = string.Empty;
        StateHasChanged();
    }

    private void InitializeArrays()
    {
        int count = InputGame.multipleQuestions?.Count ?? 0;
        questionRefs = new ElementReference[count];
        questionComponents = new AddQuestionFormComponent[count];
    }

    private void OnValidSubmit(EditContext context)
    {
        if (form1Validate)
        {
            form1Validate = false;
            form2Validate = true;
        }
        else if (form2Validate)
        {
            form2Validate = false;
            form1Validate = true;
        }
        StateHasChanged();
    }

    private async Task AddNewQuestion()
    {
        InputGame.multipleQuestions ??= new List<CreateMultipleQuestionsViewModel>();

        var newQuestion = new CreateMultipleQuestionsViewModel
        {
            CountId = InputGame.multipleQuestions.Count + 1,
            UniqueId = Guid.NewGuid().ToString(),
            PossibleAnswers = new List<CreateAnswerViewModel>
            {
                new() { Id = 1, Label = "Answer 1", Order = 0 }
            },
            Duration = TimeSpan.FromMinutes(1),
            Xperience = GetDefaultXperience(),
            Min = InputGame.DifficultyLevel == "Easy" ? 1 : (InputGame.DifficultyLevel == "Medium" ? 5 : 10),
            Sec = 0,
            AudioFiles = new List<GameFileModel>(),
            ImageFiles = new List<GameFileModel>(),
            CorrectAnswerExplanation = string.Empty,
            Question = string.Empty,
            IsValid = false
        };
        InputGame.TotalXperience += newQuestion.Xperience;
        InputGame.TotalDuration += 60;
        InputGame.multipleQuestions.Add(newQuestion);
        InitializeArrays();
        StateHasChanged();
        await SelectAndFocusQuestion(InputGame.multipleQuestions.Count - 1);
    }

    private void CreateFormCopy(int index)
    {
        var copiedGame = new CreateMultipleQuestionsViewModel
            {
                CorrectAnswerExplanation = InputGame.multipleQuestions[index].CorrectAnswerExplanation,
                Duration = InputGame.multipleQuestions[index].Duration,
                ImageFiles = new List<GameFileModel>(),
                IsValid = InputGame.multipleQuestions[index].IsValid,
                Min = InputGame.multipleQuestions[index].Min,
                PossibleAnswers = InputGame.multipleQuestions[index].PossibleAnswers,
                Question = InputGame.multipleQuestions[index].Question,
                Sec = InputGame.multipleQuestions[index].Sec,
                UniqueId = string.Empty,
                Xperience = InputGame.multipleQuestions[index].Xperience,
                CountId = InputGame.multipleQuestions.Count + 1,
                AudioFiles = new List<GameFileModel>()

            };
        InputGame.multipleQuestions[index].ImageFiles.Where(i => !i.Delete).ToList<GameFileModel>()
        .ForEach(i => copiedGame.ImageFiles.Add(new GameFileModel
        {
            Content = i.Content,
            Delete = i.Delete
        }));
        InputGame.multipleQuestions[index].AudioFiles.Where(i => !i.Delete).ToList<GameFileModel>()
        .ForEach(i => copiedGame.AudioFiles.Add(new GameFileModel
        {
            Content = i.Content,
            Delete = i.Delete
        }));
        InputGame.TotalXperience += copiedGame.Xperience;
        InputGame.TotalDuration += copiedGame.Duration.Value.TotalSeconds;
        copiedGame.PossibleAnswers.ForEach(p => { p.UniqueId = string.Empty; p.ChangeType = "Added"; });
        InputGame.multipleQuestions.Add(copiedGame);
        InitializeArrays();
        StateHasChanged();
    }

    private int GetDefaultXperience() => InputGame.DifficultyLevel switch
    {
        "Easy" => 10,
        "Medium" => 14,
        "Hard" => 16,
        _ => 10
    };

    private async Task SelectAndFocusQuestion(int index)
    {
        selectedQuestionIndex = index;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("scrollToElement", $"question-{index}");
    }

    private async Task NavigateToNext(int currentIndex)
    {
        if (currentIndex < InputGame.multipleQuestions.Count - 1)
        {
            await SelectAndFocusQuestion(currentIndex + 1);
        }
    }

    private async Task NavigateToPrevious(int currentIndex)
    {
        if (currentIndex > 0)
        {
            await SelectAndFocusQuestion(currentIndex - 1);
        }
    }

    private void CreateFormValid(int index)
    {
        Snackbar.Add($"Question {index + 1} is valid", MudBlazor.Severity.Success);
        StateHasChanged();
    }

    private void CreateFormCanceled(int index)
    {
        InputGame.TotalXperience -= InputGame.multipleQuestions[index].Xperience;
        InputGame.multipleQuestions.RemoveAt(index);
        Snackbar.Add($"Question {index + 1} has been removed", MudBlazor.Severity.Warning);
        InitializeArrays();
        StateHasChanged();
    }

    private async Task SelectQuestion(int index)
    {
        await SelectAndFocusQuestion(index);
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text)) return string.Empty;
        return text.Length <= maxLength ? text : $"{text.Substring(0, maxLength)}...";
    }

    private async Task SaveGame(int status)
    {
        if (ValidateGame())
        {
            var content = await JSRuntime.InvokeAsync<string>("getQuillContent");
            InputGame.Description = content;
            InputGame.Status = status == 0 ? "Draft" : "Published";
            try
            {
                var response = await Http.PostAsJsonAsync("api/Game/AddGame", InputGame);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Game created successfully", MudBlazor.Severity.Success);
                    Navigation.NavigateTo("/games");
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add("Failed to create game", MudBlazor.Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Please fill all required fields", MudBlazor.Severity.Warning);
        }
    }

    private bool ValidateGame()
    {
        if (string.IsNullOrWhiteSpace(InputGame.Title) ||
            string.IsNullOrWhiteSpace(InputGame.Theme) ||
            string.IsNullOrWhiteSpace(InputGame.DifficultyLevel) ||
            string.IsNullOrWhiteSpace(InputGame.Description))
            return false;

        if (!InputGame.multipleQuestions?.Any() == true)
            return false;

        foreach (var question in InputGame.multipleQuestions)
        {
            if (string.IsNullOrWhiteSpace(question.Question) ||
                question.PossibleAnswers?.Count < 2 ||
                !question.PossibleAnswers?.Any() == true ||
                !question.PossibleAnswers.Any(a => a.IsCorrect) ||
                    question.Min == 0)
                return false;
            // question.Duration = new TimeSpan(0, question.Min, question.Sec);
            // InputGame.TotalDuration += question.Duration.Value.TotalSeconds;
        }
        return true;
    }

    public class Model
    {
        public IReadOnlyList<IBrowserFile>? Files { get; set; }
    }
}
@page "/creategame"
@inject HttpClient Http

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FluentValidation
@using Microsoft.AspNetCore.Components.Forms;
@using System.Security.Claims
@using MudBlazor.Utilities
@using static HopSkills.BackOffice.Client.Controls.AddQuestionFormComponent
@inject Microsoft.Extensions.Configuration.IConfiguration config;

@inject IDialogService DialogService

@inject ISnackbar Snackbar
@inject NavigationManager Navigation

@* <MudPaper Style="background-color:transparent;"> *@
<MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Bottom">

    @if (form1Validate)
    {
        <MudTimelineItem Color="Color.Info">
            <ItemContent>
                <MudText Color="Color.Info" Align="Align.Center">General Information</MudText>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem>
            <ItemContent>
                <MudText Align="Align.Center">Content Creation</MudText>
            </ItemContent>
        </MudTimelineItem>
    }
   
    @if (form2Validate)
    {
        <MudTimelineItem Color="Color.Success">
            <ItemContent>
                <MudText Color="Color.Success" Align="Align.Center">General Information</MudText>
            </ItemContent>
        </MudTimelineItem>
        @if(InputGame.multipleQuestions.Any())
        {
            <MudTimelineItem Color="Color.Success">
                <ItemContent>
                    <MudText Color="Color.Success" Align="Align.Center">Content Creation</MudText>
                </ItemContent>
            </MudTimelineItem>
        }
        else
        {
            <MudTimelineItem Color="Color.Info">
                <ItemContent>
                    <MudText Color="Color.Info" Align="Align.Center">Content Creation</MudText>
                </ItemContent>
            </MudTimelineItem>
        }
    }

</MudTimeline>

@* <MudGrid>
    <MudItem xs="12" sm="7" Class="ml-auto justify-end">
        <MudButton ButtonType="ButtonType.Button"
                   Variant="Variant.Filled" Color="Color.Primary"
                   EndIcon="@Icons.Material.Filled.Save">Save</MudButton>
    </MudItem>
</MudGrid> *@
    <MudGrid Class="justify-center">
    <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudStack Style="width: 100%">
                    @if (form1Validate)
                    {
                    <EditForm Model="@InputGame" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <MudGrid>
                            <MudItem xs="12">
                                <MudCard>
                                    <MudCardContent>
                                        <MudItem xs="12">
                                            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                                           @ref="@_fileUpload"
                                                           @bind-Files="_model.Files"
                                                           For="@(() => _model.Files)"
                                                           AppendMultipleFiles="false"
                                                           Hidden="@false"
                                                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                                           InputStyle="opacity:0"
                                                           ErrorText="@string.Empty"
                                                           tabindex="-1"
                                                           Accept=".png, .jpg"
                                                           @ondrop="@ClearDragClass"
                                                           @ondragenter="@SetDragClass"
                                                           @ondragleave="@ClearDragClass"
                                                           @ondragend="@ClearDragClass"
                                                           OnFilesChanged="LoadFiles">
                                                <ActivatorContent>
                                                    <MudPaper Outlined="true"
                                                              Class="@_dragClass">
                                                        <MudText Typo="Typo.h6">
                                                            Add an image
                                                        </MudText>
                                                        <div class="d-flex justify-center">
                                                            @if (!string.IsNullOrEmpty(InputGame.Image?.Content))
                                                            {
                                                                <MudImage Fluid="true"
                                                                          ObjectFit="ObjectFit.Cover"
                                                                          Src="@base64data" />
                                                            }
                                                        </div>
                                                    </MudPaper>
                                                </ActivatorContent>
                                            </MudFileUpload>
                                            @if (fileNameWrong)
                                            {
                                                <MudAlert Severity="MudBlazor.Severity.Error">File Name contains special characters. Please Upload a file with no special characters and less than 255 characters.</MudAlert>
                                            }
                                            <MudToolBar Gutters="@false"
                                                        Class="relative d-flex justify-end gap-4">
                                                <MudButton Color="Color.Primary"
                                                           OnClick="@OpenFilePickerAsync"
                                                           Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Image">
                                                    Upload
                                                </MudButton>
                                                <MudButton Color="Color.Error"
                                                           Disabled="@(_model.Files is null || !_model.Files.Any())"
                                                           OnClick="@ClearAsync"
                                                           Variant="Variant.Filled">
                                                    Clear
                                                </MudButton>
                                            </MudToolBar>
                                        </MudItem>
                                        <MudItem>
                                            @if (_fileUpload?.ValidationErrors.Any() ?? false)
                                            {
                                                <MudText Color="Color.Error"
                                                         Typo="@Typo.caption">
                                                    @_fileUpload?.ValidationErrors[0]
                                                </MudText>
                                            }
                                        </MudItem>
                                        <MudItem xs="12">
                                        </MudItem>
                                        <MudGrid>
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudTextField T="string" Required="true" @bind-Value="@InputGame.Title"
                                                              UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                              Label="Title" For="@(() => InputGame.Title)" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudSelect T="string" Required="true"
                                                           @bind-Value="@InputGame.DifficultyLevel"
                                                           Placeholder="Select a difficulty level"
                                                           UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                           For="@(() => InputGame.DifficultyLevel)"
                                                           Label="Difficulty level" Variant="Variant.Outlined"
                                                           AnchorOrigin="Origin.BottomCenter">
                                                    <MudSelectItem T="string" Value="@("Easy")" />
                                                    <MudSelectItem T="string" Value="@("Medium")" />
                                                    <MudSelectItem T="string" Value="@("Hard")" />
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudSelect T="string" Required="false"
                                                           @bind-Value="@InputGame.PriorGame" Placeholder="Select a game"
                                                           Label="Game to complete before" Variant="Variant.Outlined"
                                                           AnchorOrigin="Origin.BottomCenter">
                                                    @foreach (var item in Games)
                                                    {
                                                        <MudSelectItem T="string" Value="@(item.Title)" />
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                        </MudGrid>
                                        <MudGrid>
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudSelect T="string" Required="true" For="@(() => InputGame.Theme)"
                                                           @bind-Value="@InputGame.Theme" Placeholder="Select a Theme"
                                                           UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                           Label="Theme related to" Variant="Variant.Outlined"
                                                           AnchorOrigin="Origin.BottomCenter">
                                                    <MudSelectItem T="string" Value="@("Theme A")" />
                                                    <MudSelectItem T="string" Value="@("Theme B")" />
                                                    <MudSelectItem T="string" Value="@("Theme C")" />
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudSelect T="string" Required="true" For="@(() => InputGame.ElligibleSub)"
                                                           @bind-Value="@InputGame.ElligibleSub" Placeholder="Select a Subscription"
                                                           UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                           Label="Eligible subscription" Variant="Variant.Outlined"
                                                           AnchorOrigin="Origin.BottomCenter">
                                                    <MudSelectItem T="string" Value="@("Sub A")" />
                                                    <MudSelectItem T="string" Value="@("Sub B")" />
                                                    <MudSelectItem T="string" Value="@("Sub C")" />
                                                </MudSelect>
                                            </MudItem>
                                        </MudGrid>
                                        <MudGrid>
                                            <MudItem xs="12">
                                                <MudTextField Required="true" For="@(() => InputGame.Description)"
                                                              UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                              @bind-Value="@InputGame.Description" InputMode="InputMode.text"
                                                              T="string" Label="Enter a description" AutoGrow="true" Variant="Variant.Filled" Lines="5" />
                                            </MudItem>
                                        </MudGrid>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton 
                                            ButtonType="ButtonType.Submit" 
                                            Variant="Variant.Filled" Color="Color.Primary"
                                                   Class="ml-auto" EndIcon="@Icons.Material.Filled.NavigateNext">Next</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                    }
                @if (form2Validate)
                    {
                        <AddQuestionFormComponent questionFormInput="@_questionFormInput"
                                                  OnValidEvent="CreateFormValid"
                                                  OnCancelEvent="CreateFormCanceled"></AddQuestionFormComponent>
                    <div class="object-left">
                            <MudButton   Size="Size.Medium" ButtonType="ButtonType.Button"
                               OnClick="NavigateToPreviousGameForm"
                    Color="Color.Error" StartIcon="@Icons.Material.Filled.NavigateBefore"
                               Variant="Variant.Filled">
                        Back
                    </MudButton>
                        </div>
                    
                    }
                   @*  @if(formQuestions)
                    {
                        <AddQuestionFormComponent questionFormInput="@_questionFormInput"
                                                  OnValidEvent="CreateFormValid"
                            OnCancelEvent="CreateFormCanceled"></AddQuestionFormComponent>
                    } *@
                </MudStack>
            </MudPaper>
    </MudItem>
    <MudItem >
        @* <MudPaper Class="gap-4 pa-4 mud-height-full">
            <MudGrid>
                <MudItem Class="d-flex justify-start flex-grow-1 gap-4">
                    <MudText>Title:@InputGame.Title </MudText>
                    <MudText>
                        <MudIcon Icon="@Icons.Material.Outlined.Timer" />
                        Duration: @InputGame.TotalDuration.Minutes </MudText>
                </MudItem>
                <MudItem Class="d-flex justify-end flex-grow-1 gap-4">
                    <MudText>Theme:@InputGame.Theme</MudText>
                    <MudText ><MudIcon Icon="@Icons.Material.Outlined.Star"/>
                        Xp:@InputGame.TotalXperience </MudText>
                </MudItem>
            </MudGrid>
            <MudDivider DividerType="DividerType.FullWidth" />
            <MudGrid Style="object-position:bottom">
<<<<<<< HEAD
                <MudItem xs="12" sm="12" md="12" xl="12">
                    <MudPaper>
=======
                <MudItem xs="12" sm="12" md="12" xl="12"> *@
                    @* <MudPaper>
>>>>>>> d18bcda6125ccb04bc78c2e7699770b2c371bcd7
                            @foreach(var item in InputGame.multipleQuestions)
                            {
                            <MudPaper Class=" gap-x-10 d-flex pa-4 ">
                                <MudText Class="d-inline-flex pa-4">@item.Question</MudText>
                                <MudText Class="d-inline-flex justify-end pa-4">
                                    <MudIcon Icon="@Icons.Material.Outlined.Star" />@item.Xperience
                                </MudText>
                                <MudText Class="d-inline-flex justify-end pa-4">
                                    <MudIcon Icon="@Icons.Material.Outlined.Timer" />@item.Duration
                                </MudText>
                            </MudPaper>
                            }
<<<<<<< HEAD
                    </MudPaper>
=======
                    </MudPaper> *@
                   @*  <MudDropContainer T="CreateMultipleQuestionsViewModel" App
                        Items="@InputGame.multipleQuestions" @ref="_container"
                                      ItemsSelector="@((item, dropzone) => item.Zone == dropzone)" 
                        ItemDropped="ItemUpdated"
                                      Class="d-flex flex-wrap flex-grow-1">
                        <ChildContent>
                            <MudDropZone T="CreateMultipleQuestionsViewModel" AllowReorder="true" 
                                         Class="6 rounded mud-background-gray px-4 py-1 ma-4" />
                                </ChildContent>
                                <ItemRenderer> *@
                            @* <MudListItem T="CreateMultipleQuestionsViewModel"
                                         Text="@($"{context.Question}")" /> *@
                            @* <div class="mud-elevation-25 pa-4 my-4">@context.Question</div> *@
                                   @*  <MudExpansionPanels>
                                        <MudExpansionPanel Text="@context.Question"
                                                           MaxHeight="150" Expanded="false">
                                            <TitleContent>
                                                <div class="d-flex">
                                                    <MudIcon Icon="@Icons.Material.Filled.Info" class="mr-3"></MudIcon>
                                                    <MudText><strong>@context.Question</strong></MudText>
                                                </div>
                                            </TitleContent>
                                            <ChildContent>
                                                <MudText Class="d-inline-flex justify-end pa-4">
                                                    <MudIcon Icon="@Icons.Material.Outlined.Star" />
                                                    @context.Xperience
                                                </MudText>
                                                <MudText Class="d-inline-flex justify-end pa-4">
                                                    <MudIcon Icon="@Icons.Material.Outlined.Timer" />
                                                    @context.Duration
                                                </MudText>
                                            </ChildContent>
                                        </MudExpansionPanel>
                                        <MudDivider />
                                    </MudExpansionPanels> *@
                               @*  </ItemRenderer>
                    </MudDropContainer> *@
            <MudDropContainer T="DropZoneItem" Items="_items" ItemDropped="ItemUpdated"
                              ItemsSelector="@((item, dropzone) => true)" 
                              Class="d-flex flex-wrap flex-grow-1">
                        <ChildContent>
                    <MudDropZone T="DropZoneItem"
                                 AllowReorder Class="6 rounded mud-background-gray px-4 py-1 ma-4" />
                        </ChildContent>
                        <ItemRenderer>
                            <MudPaper Class=" gap-x-10 d-flex pa-4 ">
                                <MudText Typo="Typo.h6">@context.Name</MudText>
                                <MudDropZone T="DropZoneItem" Identifier="@context.Name" AllowReorder Class="rounded mud-background-gray px-4 py-1 ma-4" />
                            </MudPaper>
                        </ItemRenderer>
                    </MudDropContainer>
                    
>>>>>>> d18bcda6125ccb04bc78c2e7699770b2c371bcd7
                </MudItem>
            </MudGrid>
            @* @if (InputGame.multipleQuestions.Any())
            {
                <MudGrid>
                <MudItem>
                    <MudPaper>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   DropShadow="false" OnClick="CreateGameAsDraft">Save As A Draft</MudButton>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   DropShadow="false" OnClick="CreateGameAndPublish">Save & Publish</MudButton>
                    </MudPaper>
                </MudItem>
                </MudGrid>
<<<<<<< HEAD
            } *@
            </MudPaper>
            </MudItem>
</MudGrid>
@* </MudPaper> *@
=======
            }
        </MudPaper>
    </MudItem>
</MudGrid> *@


>>>>>>> d18bcda6125ccb04bc78c2e7699770b2c371bcd7
@code {
    private string? serviceEndpoint;
    private string? backendUrl;
    private bool success;
    private bool disabledNext1 {get; set;}
    private bool disabledNext2 {get; set;}
    private bool form1Validate { get; set; }
    private bool form2Validate { get; set; }
    private bool form3Validate { get; set; }
    private bool formQuestions { get; set; }
    private bool form1IsValid { get; set; }
    private bool fileNameWrong { get; set; }
    private MudDropContainer<CreateMultipleQuestionsViewModel> _container;
    private string getPriorGamesEndpoint { get; set; }
    private CreateMultipleQuestionsViewModel _questionFormInput { get; set; } 
    EditContext InputGameContext1;
    EditContext InputGameContext2;
    EditContext InputGameContext3;
    private CreateGameViewModel InputGame = new CreateGameViewModel();
    string[] errors = { };
    MudForm form1 = new MudForm() { IsValid = false };
    MudButton next1 = new MudButton() { Disabled = true };
    MudButton next2 = new MudButton() { Disabled = true };
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authenticationState { get; set; }
    private ClaimsPrincipal authenticatedUser { get; set; }
    private List<GameViewModel>? Games;
    private string base64data = "";
    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"{backendUrl}/api/Game/AddGame";
        InputGame.Image = new CreateGameImageViewModel();
        InputGameContext1 = new(InputGame);
        InputGameContext2 = new(InputGame);
        InputGameContext3 = new(InputGame);
        InputGameContext1.OnFieldChanged += InputGameContext1_OnFieldChanged;
        InputGame.multipleQuestions = new List<CreateMultipleQuestionsViewModel>();
        form1Validate = true;
        disabledNext1 = true;
        disabledNext2 = true;
        fileNameWrong = false;
        if (authenticationStateTask is not null)
        {
            authenticationState = await authenticationStateTask;
            if (authenticatedUser is null)
                authenticatedUser = authenticationState?.User;
        }
        Games = new List<GameViewModel>();
        if (authenticatedUser.IsInRole("Admin"))
            getPriorGamesEndpoint = $"{backendUrl}/api/Game/GetAll";
        else
        {
            var user = await Http.GetFromJsonAsync<UserViewModel>($"{backendUrl}/api/User/userdetails/{authenticatedUser.Identity.Name}");
            getPriorGamesEndpoint = $"{backendUrl}/api/Game/getgamesbycustomer/{user.Company}";
        }
        if (!string.IsNullOrEmpty(serviceEndpoint))
            Games = await Http.GetFromJsonAsync<List<GameViewModel>>(getPriorGamesEndpoint);
    }

    private void InputGameContext1_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (!String.IsNullOrEmpty(InputGame.Title)
        && !String.IsNullOrEmpty(InputGame.DifficultyLevel)
        && !String.IsNullOrEmpty(InputGame.Theme)
        && !String.IsNullOrEmpty(InputGame.ElligibleSub) && !fileNameWrong)
            disabledNext1 = false;
        if (!String.IsNullOrEmpty(InputGame.Description))
            disabledNext2 = false;
        StateHasChanged();
    }

    protected async Task CreateFormCanceled()
    {
        formQuestions = !formQuestions;
        form3Validate = !form3Validate;
    }

    private void RefreshContainer()
    {
        //update the binding to the container
        StateHasChanged();

        //the container refreshes the internal state
        _container.Refresh();
    }

    protected async void CreateFormValid(CreateMultipleQuestionsViewModel validQuestionFom)
    {
        _questionFormInput = validQuestionFom;
        _questionFormInput.Zone = _zones[0].Name;
        InputGame.multipleQuestions.Add(_questionFormInput);
        InputGame.TotalXperience += _questionFormInput.Xperience;
        InputGame.TotalDuration.Add(TimeSpan.Parse(_questionFormInput.Duration));
        Snackbar.Add("Question Form Has Been Added Successfully", MudBlazor.Severity.Success);
        formQuestions = !formQuestions;
        form3Validate = !form3Validate;
        RefreshContainer();
    }

    private void OnValidSubmit(EditContext context)
    {
        if (form1Validate)
        {
            form1Validate = false;
            form2Validate = true;
        }
        else if (form2Validate)
        {
            form2Validate = false;
            form3Validate = true;
        }
        StateHasChanged();
    }

    private void DisplayFormQuestions()
    {
        form2Validate = false;
        formQuestions = !formQuestions;
    }

    private void NavigateToPreviousGameForm()
    {
        if (form2Validate)
        {
            form1Validate = true;
            form2Validate = false;
        }
        else if (form3Validate)
        {
            form2Validate = true;
            form3Validate = false;
        }
    }

    private async void CreateGameAndPublish()
    {
        InputGame.Status = "Published";
        InputGame.Creator = authenticatedUser.Identity.Name; ;
        var result = await Http.PostAsJsonAsync(serviceEndpoint, InputGame);
        Navigation.NavigateTo("/games");
    }

    private async void CreateGameAsDraft()
    {
        InputGame.Status = "Draft";
        InputGame.Creator = authenticatedUser.Identity.Name;
        var result = await Http.PostAsJsonAsync(serviceEndpoint, InputGame);
        Navigation.NavigateTo("/games");
    }

    #nullable enable
    public class Model
    {
        public IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();
    }

    private Model _model =  new();
    private ModelFluentValidator _validationRules = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private bool _isValid;
    private bool _isTouched;
    private const string FileContent = "this is content";
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        var regexItem = new Regex("^[a-zA-Z0-9_.-]*$");
        InputGame.Image.Title = e.File.Name.ToString();
        if (regexItem.IsMatch(e.File.Name.ToString()))
        {
            fileNameWrong = false;
            var format = e.File.ContentType;
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, int.MaxValue);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            base64data = "data:image/png;base64," + Convert.ToBase64String(buffer);
            InputGame.Image.Content = base64data;
            StateHasChanged();
        }
        else
        {
            fileNameWrong = true;
            disabledNext1 = true;
        }
    }

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private Task ClearAsync()
    {
        InputGame.Image = new CreateGameImageViewModel();
        fileNameWrong = false;
        _fileUpload?.ClearAsync();
        StateHasChanged();
        return Task.CompletedTask;
    }

    public class ModelFluentValidator : AbstractValidator<Model>
    {
        public ModelFluentValidator()
        {
            RuleFor(x => x.Files)
                .NotEmpty()
                .WithMessage("There must be at least 1 file.");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Model>.CreateWithOptions((Model)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

    RegisterAccountForm model = new RegisterAccountForm();

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private void ItemUpdated(MudItemDropInfo<DropZoneItem> dropItem) => dropItem.Item.Zone = dropItem.DropzoneIdentifier;

    private List<DropZone> _zones = new()
    {
        new() { Name = "Drop Zone 1" }
    };

    private List<DropZoneItem> _items = new()
    {
        new() { Zone = "Drop Zone 1", Name = "Item 1" },
        new() { Zone = "Drop Zone 1", Name = "Item 2" },
        new() { Zone = "Drop Zone 2", Name = "Item 3" },
    };

    private class DropZone
    {
        public string Name { get; init; }
    }

    private class DropZoneItem
    {
        public string Zone { get; set; }
        public string Name { get; init; }
    }
}

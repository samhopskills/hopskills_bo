@page "/editgame/{selectedId}"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FluentValidation
@using Microsoft.AspNetCore.Components.Forms;
@using System.Security.Claims
@using static HopSkills.BackOffice.Client.Controls.AddQuestionFormComponent
@inject Microsoft.Extensions.Configuration.IConfiguration config;

@inject IDialogService DialogService

@inject ISnackbar Snackbar
@inject NavigationManager Navigation
<style>
    .outer-container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding: 20px;
        max-width: 1200px; /* Réduction de la largeur maximale */
        margin: 0 auto; /* Centrer le conteneur */
        min-height: 80vh; /* Réduction de la hauteur minimale */
        max-height: 800px; /* Ajout d'une hauteur maximale */
        overflow-y: auto; /* Ajout d'un défilement vertical si nécessaire */
    }

    .quiz-container {
        display: flex;
        flex-direction: row;
        justify-content: center;
        gap: 20px;
        max-width: 1300px;
        width: 100%;
    }

    .quiz-form-container {
        display: flex;
        align-items: stretch;
        margin-bottom: 20px;
        background-color: #ffffff;
        border-radius: 8px;
        /*box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 20px;
        flex: 0 1 792px; /* Augmenté de 720px à 792px (10% de plus) */ */
    }

   /*  .quiz-info-card {
        width: 100%;
        height: 100%;
        overflow-y: auto;
        overflow-x: hidden;
        padding: 15px;
        box-sizing: border-box;
        background-color: transparent !important;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    } */

    .page-content {
        position: relative;
        width: 100%;
        overflow-x: hidden; /* Prevent horizontal scrollbar */
    }

    .questions-container {
        overflow-y: auto;
        flex-grow: 1;
        padding-right: 10px; /* Espace pour la barre de défilement */
        max-height: calc(100vh - 200px);
    }

    .question-container {
        display: flex;
        align-items: stretch;
        margin-bottom: 20px;
        width: 100%; /* Utilise toute la largeur disponible */
    }

    .question-form {
        flex-grow: 1;
        margin-right: 10px;
    }

    .nav-buttons {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 10px;
    }

    .nav-button {
        padding: 4px;
        min-width: 0;
        width: 36px;
        height: 36px;
    }

    
    .add-image-container {
        border: 2px dashed #ccc;
        border-radius: 8px;
        height: 200px;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 20px;
        overflow: hidden;
    }

    .add-image-icon {
        font-size: 48px;
        color: #007bff;
    }



    .question-item {
        display: flex;
        align-items: center;
        padding: 8px;
        background-color: #f0f0f0;
        transition: background-color 0.3s ease;
        border-radius: 16px;
    }

        .question-item:hover {
            background-color: #e0e0e0;
        }

    .expansion-panel-wrapper {
        flex-grow: 1;
        margin-right: 8px;
    }

    .mud-expand-panel {
        box-shadow: none !important;
        border: 1px solid #e0e0e0;
        border-radius: 16px !important;
        overflow: hidden;
    }

   

        .mud-expand-panel:last-child {
            margin-bottom: 0 !important; /* Suppression de la marge pour le dernier panneau */
        }

    .mud-expand-panel-header {
        padding: 0 !important;
        border-radius: 16px !important;
    }

    .mud-expand-panel-content {
        padding: 8px !important;
        background-color: #ffffff;
        border-bottom-left-radius: 16px !important;
        border-bottom-right-radius: 16px !important;
    }

    .mud-expansion-panels > .mud-expand-panel {
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        overflow: hidden;
    }

    .quiz-info-card {
        display: flex;
        flex-direction: column;
        gap: 16px; /* Espace entre les panneaux */
        padding: 10px;
        /* max-height: calc(50vh - 64px); /* Adjust based on your header height */ */
        /* overflow-y: auto; */
    }


    .uniform-panel {
        height: 250px; /* Hauteur fixe pour tous les panneaux */
        width: 100%; /* Utilise toute la largeur du conteneur parent */
        overflow: hidden; /* Cache tout contenu dépassant */
    }

    .panel-content {
        height: calc(100% - 48px); /* Hauteur totale moins la hauteur de l'en-tête */
        overflow-y: auto; /* Défilement vertical si le contenu dépasse */
        padding: 8px;
    }

    .panel-header {
        height: 48px; /* Hauteur fixe pour l'en-tête */
        display: flex;
        align-items: center;
        padding: 0 16px;
        overflow: hidden;
    }

    .question-text {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        flex-grow: 1;
    }

    .question-info {
        display: flex;
        align-items: center;
        white-space: nowrap;
        margin-left: 8px;
    }

    .question-actions {
        display: flex;
        justify-content: flex-end;
        padding: 8px;
    }

    .quiz-info-card-container {
        transition: max-width 0.3s ease-in-out, opacity 0.3s ease-in-out;
        max-width: 450px;
        width: 100%;
        opacity: 1;
        flex-shrink: 0;
    }

        .quiz-info-card-container.hidden {
            max-width: 0;
            opacity: 0;
        }


    .toggle-button-container {
        position: relative;
        z-index: 2;
        flex-shrink: 0;
    }

    .toggle-button {
        position: absolute;
        left: -20px; /* Ajustez cette valeur selon vos besoins */
        top: 50%;
        transform: translateY(-50%);
    }

    .mud-expansion-panel {
        margin-bottom: 8px;
    }


    .questions-container::-webkit-scrollbar {
        width: 6px;
    }

    .questions-container::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .questions-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }

        .questions-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    .mud-expand-panel {
        box-shadow: none !important;
        border: 1px solid #e0e0e0;
    }

    .mud-expand-panel-header {
        padding: 0 !important;
    }

    .mud-expand-panel-content {
        padding: 8px !important;
    }

     @@media (max-width: 600px) {
        .question-info {
            display: none;
        }}

        @@media (max-width: 1300px) { /* Ajusté pour le nouveau max-width */
            .quiz-container {
                flex-direction: column;
                align-items: center;
            }

            .quiz-form-container,
            .quiz-info-card {
                width: 100%;
                /* max-width: 720px; /* Ajusté pour correspondre à la nouvelle largeur du formulaire */ */
            }

            .quiz-info-card {
                max-height: none; /* Supprime la limite de hauteur en mode responsive */
            }
        }

        @@media (max-width: 768px) {
            .quiz-container {
                flex-direction: column;
            }

            .quiz-info-card-container {
                max-width: 100%;
            }

            .toggle-button-container {
                display: none; /* Cache le bouton sur les petits écrans */
            }
        }

    .side-menu {
        position: fixed;
        top: 0;
        right: 0;
        /* height: 50vh; */
        width: 400px;
        z-index: 1300;
        transition: transform 0.3s ease-in-out;
        background-color: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        box-shadow: -2px 0 10px rgba(0,0,0,0.1);
        border-top-left-radius: 10px;
        border-bottom-left-radius: 10px;
        overflow-y: auto;
    }

        .side-menu.closed {
            transform: translateX(100%);
        }


    .toggle-button-summary {
        position: fixed;
        top: 34%; /* Aligné avec le centre du MudDrawer */
        right: 400px; /* Aligné avec le bord gauche du MudDrawer ouvert */
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out, right 0.3s ease-in-out;
        z-index: 1301;
        background-color: rgba(255, 255, 255, 0.5) !important; /* Fond semi-transparent */
        border: 1px solid rgba(224, 224, 224, 0.5);
        border-right: none;
        border-top-right-radius: 4px;
        border-bottom-right-radius: 4px;
        padding: 8px;
        box-shadow: -2px 0 5px rgba(0,0,0,0.1);
    }

        .toggle-button-summary.closed {
            right: 10%;
            transform: translateX(0);
        }

    .side-menu-content {
        color: #333; /* Couleur de texte foncée pour la lisibilité */
    }

        .side-menu-content .mud-typography {
            text-shadow: 0 0 5px rgba(255,255,255,0.5); /* Ombre légère pour améliorer la lisibilité */
        }

    .main-content {
        transition: none;
        width: 100%;
    }

       .main-content.menu-open {
                margin-right: 300px; /* Ajuster selon la largeur du menu */
            }

    
    

    

    .delete-image-button {
        position: absolute;
        top: 8px;
        right: 8px;
        background-color: rgba(255, 255, 255, 0.7);
        border-radius: 50%;
        padding: 4px;
        transition: background-color 0.3s ease;
    }

        .delete-image-button:hover {
            background-color: rgba(255, 255, 255, 0.9);
        }
</style>

<div class="page-content">
    <div class="main-content">
 @if (form1Validate)
 {
            <style>
                .image-container {
                    position: relative;
                    width: 100%;
                    height: 200px; /* Correspond à la hauteur du MudPaper */
                    overflow: hidden;
                }

                    .image-container img {
                        width: 100%;
                        height: 100%;
                        object-fit: cover;
                    }

                .delete-button {
                    position: absolute;
                    top: 8px;
                    right: 8px;
                    background-color: rgba(255, 255, 255, 0.7);
                    border-radius: 50%;
                }
            </style>
         <div class="outer-container">           
<div class="quiz-container">
    <div class="quiz-form-container">
   <MudPaper Elevation="3" Class="@($"pa-4 question-paper")">
    <EditForm Model="@InputGame" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
        <MudGrid>

            <MudItem xs="12">
                                        <MudPaper Height="200px" Width="100%" Outlined="true" Class="d-flex justify-center align-center">
                                            @if (string.IsNullOrEmpty(InputGame.Image?.Content))
        {
                                                <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                                               @ref="@_fileUpload"
                                                               @bind-Files="_model.Files"
                                                               For="@(() => _model.Files)"
                                                               AppendMultipleFiles="false"
                                                               Hidden="@false"
                                                               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                                               InputStyle="opacity:0"
                                                               ErrorText="@string.Empty"
                                                               tabindex="-1"
                                                               Accept=".jpg,.jpeg,.png"
                                                               @ondrop="@ClearDragClass"
                                                               @ondragenter="@SetDragClass"
                                                               @ondragleave="@ClearDragClass"
                                                               @ondragend="@ClearDragClass"
                                                               OnFilesChanged="LoadFiles">
                                                    <ActivatorContent>
                                                        <MudPaper Outlined="true">
                                                            <div class="d-flex flex-column align-center justify-center h-100 w-100">
                                                                <MudIcon Icon="@Icons.Material.Filled.AddPhotoAlternate" Class="add-image-icon mb-2" />
                                                                <MudText Align="Align.Center">Ajouter une image</MudText>
                                                            </div>
                                                        </MudPaper>
                                                    </ActivatorContent>
                                                </MudFileUpload>
                                            }
        else
        {
                                                <div class="image-container">
                                                    <img src="@base64data" alt="Image du jeu" />
                                                    <MudIconButton Icon="@Icons.Material.Filled.Close"
                                                                   Color="Color.Error"
                                                                   Size="Size.Small"
                                                                   Class="delete-button"
                                                                   OnClick="DeleteImage" />
                                                </div>
        }
    </MudPaper>
               
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudTextField T="string" Required="true" @bind-Value="@InputGame.Title"
                              UserAttributes="@(new() { { "aria-required", "true" } } )"
                              Label="Title" For="@(() => InputGame.Title)" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" sm="6">
                <MudSelect T="string" Required="true" For="@(() => InputGame.Theme)"
                           @bind-Value="@InputGame.Theme" Placeholder="Select a Theme"
                           UserAttributes="@(new() { { "aria-required", "true" } } )"
                           Label="Theme related to" Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="string" Value="@("Theme A")" />
                    <MudSelectItem T="string" Value="@("Theme B")" />
                    <MudSelectItem T="string" Value="@("Theme C")" />
                </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="6">
                <MudSelect T="string" Required="true" For="@(() => InputGame.ElligibleSub)"
                           @bind-Value="@InputGame.ElligibleSub" Placeholder="Select a Subscription"
                           UserAttributes="@(new() { { "aria-required", "true" } } )"
                           Label="Eligible subscription" Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="string" Value="@("Sub A")" />
                    <MudSelectItem T="string" Value="@("Sub B")" />
                    <MudSelectItem T="string" Value="@("Sub C")" />
                </MudSelect>
                </MudItem>
                @* <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="IsEvaluationQuiz" Label="Quiz d'évaluation ?" Variant="Variant.Outlined">
                        <MudSelectItem Value="@("Non")">Non</MudSelectItem>
                    </MudSelect>
                </MudItem> *@

                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="Subscription" Label="Abonnement" Variant="Variant.Outlined">
                        <MudSelectItem Value="@("Quel abonnement y aura accès ?")">Quel abonnement y aura accès ?</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                <MudSelect T="string" Required="false"
                           @bind-Value="@InputGame.PriorGame" Placeholder="Select a game"
                           Label="Game to complete before" Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter">
                    @foreach (var item in Games)
                    {
                        <MudSelectItem T="string" Value="@(item.Title)" />
                    }
                </MudSelect>
                </MudItem>

                <MudItem xs="12" Class="d-flex justify-end">
                    <MudButton ButtonType="ButtonType.Submit" 
                    Variant="Variant.Filled" Color="Color.Primary"
                               EndIcon="@Icons.Material.Filled.NavigateNext">Next</MudButton>
                </MudItem>
            </MudGrid>
            </EditForm>
            </MudPaper>
        </div>
       @*  <div class="toggle-button-container">
            <MudIconButton Icon="@(_isInfoCardVisible ? Icons.Material.Filled.ChevronRight : Icons.Material.Filled.ChevronLeft)"
                           Color="Color.Primary"
                           OnClick="ToggleInfoCard"
                           Class="toggle-button" />
        </div>

        <div class="quiz-info-card-container @(_isInfoCardVisible ? "visible" : "hidden")">
    
    </div> *@
</div>
</div>
}

<div class="@($"main-content {(isMenuOpen ? "menu-open" : "")}")">
@if (form2Validate)
{
    <style>
        .question-form-container {
            margin-bottom: 16px;
        }

            .question-form-container:not(:first-child) {
                margin-top: -8px;
            }

        .question-paper {
            transition: all 0.3s ease;
        }

            .question-paper:hover {
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

            .question-paper.selected {
                background-color: #e3f2fd;
                border-color: #2196f3;
                box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.3);
            }
    </style>

        <MudContainer MaxWidth="MaxWidth.Large"
                      Class="d-flex flex-column justify-start align-center"
                      Style="min-height: calc(100vh - 64px); padding-bottom: 2rem;">
            <MudGrid>
                @if (InputGame.multipleQuestions != null && InputGame.multipleQuestions.Any())
                {
                    @for (int i = 0; i < InputGame.multipleQuestions.Count; i++)
                    {
                        int index = i;
                        <MudItem xs="12" sm="12" md="12" lg="12">
                            <div class="question-container">
                                <div class="question-form" @ref="questionRefs[index]" id="@($"question-{index}")">
                                    <AddQuestionFormComponent @ref="questionComponents[index]"
                                                              questionFormInput="InputGame.multipleQuestions[index]"
                                                              OnValidEvent="() => CreateFormValid(index)"
                                                              OnCancelEvent="() => CreateFormCanceled(index)"
                                                              OnAddEvent="() => AddNewPage()"
                                                              IsSelected="selectedQuestionIndex == index"
                                                              OnSelect="() => SelectQuestion(index)"
                                                                      QuizTitle="@($"Quiz {index + 1}")" />
                                </div>
                                <div class="nav-buttons">
                                    <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp"
                                                   Color="Color.Primary"
                                                   OnClick="() => NavigateToPrevious(index)"
                                                   Disabled="@(index == 0)"
                                                   Class="nav-button" />
                                    <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown"
                                                   Color="Color.Primary"
                                                   OnClick="() => NavigateToNext(index)"
                                                   Disabled="@(index == InputGame.multipleQuestions.Count - 1)"
                                                   Class="nav-button" />
                                </div>
                            </div>
                        </MudItem>
                    }

                    <MudItem xs="12" Class="d-flex justify-center align-center mt-4">
                        <MudButton Variant="Variant.Outlined"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Color="Color.Dark"
                                   Size="Size.Large"
                                   OnClick="AddNewPage">
                            Ajouter un quiz
                        </MudButton>
                    </MudItem>
                }
                else
            {
                <MudItem xs="12" Class="d-flex justify-center align-center" Style="height: 400px;">
                    <MudButton VVariant="Variant.Outlined"
                               StartIcon="@Icons.Material.Outlined.Add"
                                   Color="Color.Dark"
                               Size="Size.Large"
                               OnClick="AddNewPage">
                                                Ajouter un quiz
                    </MudButton>
                </MudItem>
            }
        </MudGrid>
    </MudContainer>
}
</div>
<style>
            .draggable-item {
                cursor: move;
            }

                .draggable-item.dragging {
                    opacity: 0.5;
                }

            .drag-handle {
                cursor: move;
            }

            .clickable-header {
                cursor: pointer;
                transition: background-color 0.3s ease;
            }

                .clickable-header:hover {
                    background-color: rgba(0, 0, 0, 0.04);
                }

            .quiz-info-card {
                display: flex;
                flex-direction: column;
                gap: 16px; /* Espace entre les panneaux */
            }

            .question-container {
                width: 100%; /* Utilise toute la largeur disponible */
            }

            .uniform-panel {
                height: 250px; /* Hauteur fixe pour tous les panneaux */
                width: 100%; /* Utilise toute la largeur du conteneur parent */
                overflow: hidden; /* Cache tout contenu dépassant */
            }

            .panel-content {
                height: calc(100% - 48px); /* Hauteur totale moins la hauteur de l'en-tête */
                overflow-y: auto; /* Défilement vertical si le contenu dépasse */
                padding: 8px;
            }

            .panel-header {
                height: 48px; /* Hauteur fixe pour l'en-tête */
                display: flex;
                align-items: center;
                padding: 0 16px;
                overflow: hidden;
            }

            .question-text {
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                flex-grow: 1;
            }

            .question-info {
                display: flex;
                align-items: center;
                white-space: nowrap;
                margin-left: 8px;
            }

            .question-actions {
                display: flex;
                justify-content: flex-end;
                padding: 8px;
            }
</style>
        <MudDrawer @bind-Open="@isMenuOpen"
                   Anchor="Anchor.Right"
                   Elevation="1"
                   OpenMiniOnHover="true"
                   Variant="@DrawerVariant.Mini"
                   Width="400px"
                   Class="side-menu">
            <div class="side-menu-content">
                <MudTooltip Text="Return to Quiz Info" Placement="Placement.End">
                    <MudDrawerHeader @onclick="GoBackToForm1" Class="clickable-header">
                    <MudGrid>
                        <MudItem xs="12" Class="d-flex align-center">
                            <MudAvatar Style="margin-right: 16px; width: 60px; height: 60px; object-fit: cover;">
                                @if (!string.IsNullOrEmpty(base64data) && base64data != "data:image/png;base64,")
                                {
                                    <MudImage Src="@base64data" Alt="Quiz Image" Width="60" Height="60" ObjectFit="ObjectFit.Cover" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Image" />
                                }
                            </MudAvatar>
                            <div>
                                <MudText Typo="Typo.h6">@InputGame.Title</MudText>
                                <MudText Typo="Typo.body2">@InputGame.Theme</MudText>
                            </div>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-space-between mt-2">
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Class="mr-1" />
                                Duration:  min 00 s
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Class="mr-1" />
                                Points : @InputGame.TotalXperience Xp @InputGame.DifficultyLevel
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </MudDrawerHeader>
                </MudTooltip>
               <MudDrawerContainer>
            <div class="quiz-info-card">
                @if (InputGame?.multipleQuestions != null)
                {
                    @for (int i = 0; i < InputGame.multipleQuestions.Count; i++)
                    {
                        var question = InputGame.multipleQuestions[i];
                        var index = i;
                            <div class="question-container">
                        <div class="draggable-item" draggable="true" 
                        @key="question.UniqueId"
                             @ondragstart="@(() => HandleDragStart(index))"
                             @ondragover:preventDefault
                             @ondragover="@(() => {})"
                                         @ondragend="@HandleDragEnd" ondrop="@(() => HandleDrop(index))"
                                         @onclick="@(() => SelectQuestionFromSummary(index))">
                                            <MudExpansionPanel Elevation="2" Class="@(selectedQuestionIndex == index ? "selected-question" : "")" @ondrop="@(() => HandleDrop(index))">
                                    <TitleContent>
                                                <div class="panel-header">
                                                    <MudIcon Icon="@Icons.Material.Filled.DragIndicator"
                                                             Size="Size.Small"
                                                             Color="Color.Dark"
                                                             Class="mr-2 drag-handle" />
                                                    <span class="question-text">@TruncateText(question.Question, 30)</span>
                                                    <div class="question-info">
                                                        <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Class="mr-1" />
                                                        <span class="mr-2">@question.Xperience Xp</span>
                                                        <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" Class="mr-1" />
                                                        <span>@question.Duration.Value.Minutes min</span>
                                                    </div>
                                                </div>
                                    </TitleContent>
                                    <ChildContent>
                                                  <div class="panel-content">
                                                    <MudText Typo="Typo.body2">@question.CorrectAnswerExplanation</MudText>
                                         <MudList T="CreateAnswerViewModel" 
                                             Dense="true" DisablePadding="true">
                                                    @foreach (var answer in question.PossibleAnswers)
                                                    {
                                                        <MudListItem>
                                                            <div class="d-flex align-center">
                                                                    <MudListItem IconColor="@(answer.IsCorrect ? Color.Success : Color.Error)" Icon="@(answer.IsCorrect ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel)">
                                                                            @answer.Answer
                                                                        </MudListItem>
                                                            </div>
                                                        </MudListItem>
                                                    }
                                                </MudList>
                                                </div>
                                    </ChildContent>
                                </MudExpansionPanel>


                                    </div>
                                <div class="question-actions">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Dark" />
                                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small" Color="Color.Dark" />
                                </div>
                                </div>
                    }
                }
                else
                {
                    <MudText>No questions available.</MudText>
                }
            </div>
                    <MudPaper Class="d-flex justify-center pa-4" Elevation="0">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ValidateAndSave(0))" Class="mr-2">Save as Draft</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => ValidateAndSave(1))">Publish</MudButton>
                    </MudPaper>
        </MudDrawerContainer>
            </div>
        </MudDrawer>
</div>
</div>
@code {

    private async Task SelectQuestionFromSummary(int index)
    {
        if (form1Validate)
        {
            form1Validate = false;
            form2Validate = true;
            StateHasChanged();
            await Task.Delay(50);
        }
        await SelectAndFocusQuestion(index);
    }

    private bool isMenuOpen = false;

    private void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
    }
    private int currentQuestionIndex = 0;

    private int? selectedQuestionIndex;

    private async Task SelectQuestion(int index)
    {
        await SelectAndFocusQuestion(index);
    }

    private void SetCurrentQuestion(int index)
    {
        currentQuestionIndex = index;
        StateHasChanged();
    }

    private void CreateFormValid(int index)
    {
        // Handle valid form for the question at the given index
        Snackbar.Add($"Question {index + 1} is valid", MudBlazor.Severity.Success);
        StateHasChanged();
    }

    private void CreateFormCanceled(int index)
    {
        // Handle form cancellation for the question at the given index
        InputGame.multipleQuestions.RemoveAt(index);
        Snackbar.Add($"Question {index + 1} has been removed", MudBlazor.Severity.Warning);
        StateHasChanged();
    }

    private string drawerStyle => isMenuOpen ? "" : "transform: translateX(100%);";
    private string toggleButtonStyle => isMenuOpen
        ? "right: 400px; transform: translateX(0);"
        : "right: 4%; transform: translateX(0);";

    private int? draggedIndex;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InjectJavaScriptAsync();
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.enableDragging = (element) => {
                    if (element) {
                        element.draggable = true;
                    }
                };

                window.disableDragging = (element) => {
                    if (element) {
                        element.draggable = false;
                    }
                };

                window.handleDragStart = (e) => {
                    if (e && e.target) {
                        e.dataTransfer.effectAllowed = 'move';
                        let draggableItem = e.target.closest('.draggable-item');
                        if (draggableItem) {
                            draggableItem.classList.add('dragging');
                        }
                    }
                };

                window.handleDragOver = (e) => {
                    if (e && e.preventDefault) {
                        e.preventDefault();
                    }
                    if (e && e.dataTransfer) {
                        e.dataTransfer.dropEffect = 'move';
                    }
                    return false;
                };

                window.handleDrop = (e) => {
                    if (e && e.stopPropagation) {
                        e.stopPropagation();
                    }
                    let draggingElement = document.querySelector('.dragging');
                    if (draggingElement) {
                        draggingElement.classList.remove('dragging');
                    }
                    return false;
                };
            ");
        }
    }


    private void HandleDragStart(int index)
    {
        draggedIndex = index;
    }

    private void HandleDragEnd()
    {
        draggedIndex = null;
    }

    private async Task HandleDrop(int index)
    {
        if (draggedIndex.HasValue && draggedIndex.Value != index)
        {
            var item = InputGame.multipleQuestions[draggedIndex.Value];
            InputGame.multipleQuestions.RemoveAt(draggedIndex.Value);
            InputGame.multipleQuestions.Insert(index, item);
            UpdateQuestionOrder();

            // Mettre à jour l'index sélectionné si nécessaire
            if (selectedQuestionIndex == draggedIndex)
            {
                selectedQuestionIndex = index;
            }
            else if (selectedQuestionIndex >= index && selectedQuestionIndex < draggedIndex)
            {
                selectedQuestionIndex++;
            }
            else if (selectedQuestionIndex <= index && selectedQuestionIndex > draggedIndex)
            {
                selectedQuestionIndex--;
            }

            draggedIndex = null;
            StateHasChanged();

            // Mettre à jour le focus après le réarrangement
            await Task.Delay(50); // Petit délai pour assurer que le DOM est mis à jour
            if (selectedQuestionIndex.HasValue)
            {
                await SelectAndFocusQuestion(selectedQuestionIndex.Value);
            }
        }
    }

    private void UpdateQuestionOrder()
    {
        for (int i = 0; i < InputGame.multipleQuestions.Count; i++)
        {
            InputGame.multipleQuestions[i].Id = i + 1;
        }
        StateHasChanged();
    }

    private string? serviceEndpoint;
    private string? backendUrl;
    private bool success;
    private bool disabledNext1 { get; set; }
    private bool disabledNext2 { get; set; }
    private bool form1Validate { get; set; }
    private bool form2Validate { get; set; }
    private bool form3Validate { get; set; }
    private bool formQuestions { get; set; }
    private bool form1IsValid  { get; set; }
    private bool fileNameWrong { get; set; }

    private string getPriorGamesEndpoint { get; set; }
    private CreateMultipleQuestionsViewModel _questionFormInput { get; set; }
    EditContext InputGameContext;
    private EditGameViewModel InputGame { get; set; } = new EditGameViewModel();
    string[] errors = { };
    MudForm form1 = new MudForm() { IsValid = false };
    MudButton next1 = new MudButton() { Disabled = true };
    MudButton next2 = new MudButton() { Disabled = true };
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authenticationState { get; set; }
    private ClaimsPrincipal authenticatedUser { get; set; }
    private List<GameViewModel> Games { get; set; } = new List<GameViewModel>();
    // private List<AddQuestionFormComponent> addQuestionForms { get; set; }
    [Parameter]
    public string selectedId { get; set; }
    private string base64data = "data:image/png;base64,";
    private ElementReference[] questionRefs;
    private AddQuestionFormComponent[] questionComponents;
    [Parameter]
    public EventCallback<EditGameViewModel> OnSaveGame { get; set; }
    public class Model
    {
        public IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();
    }

    private Model _model = new();
    private ModelFluentValidator _validationRules = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private bool _isValid;
    private bool _isTouched;
    private const string FileContent = "this is content";
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    private string Title { get; set; } = "zqaa";
    private string Theme { get; set; } = "electricité";
    private string DifficultyLevel { get; set; } = "Amateur";
    private string IsEvaluationQuiz { get; set; } = "Non";
    private string Subscription { get; set; } = "Quel abonnement y aura accès ?";
    private string PrerequisiteQuiz { get; set; } = "";

    public class QuestionItem
    {
        public string Text { get; set; }
        public int Points { get; set; }
        public string Time { get; set; }
    }

    private bool _isInfoCardVisible = true;

    private void ToggleInfoCard()
    {
        _isInfoCardVisible = !_isInfoCardVisible;
    }


    protected override async Task OnInitializedAsync()
    {
        fileNameWrong = false;
        InputGameContext = new(InputGame);
        InputGame = await Http.GetFromJsonAsync<EditGameViewModel>($"{backendUrl}/api/Game/Get/{selectedId}");
        if(InputGame != null)
        {
            if (InputGame?.multipleQuestions != null)
            {
                InputGame.multipleQuestions.ForEach(m => m.IsValid = true);
                foreach (var question in InputGame.multipleQuestions)
                {
                    if (string.IsNullOrEmpty(question.UniqueId))
                    {
                        question.UniqueId = Guid.NewGuid().ToString();
                    }
                }
                // InputGame.multipleQuestions.ForEach(m => m.UniqueId = Guid.NewGuid().ToString());
            }

            base64data = !string.IsNullOrEmpty(InputGame.Image?.Content)
                        ? "data:image/png;base64," + InputGame.Image.Content
                        : "data:image/png;base64,";
            serviceEndpoint = $"{backendUrl}/api/Game/EditGame";
            InputGameContext = new(InputGame);
            InputGameContext.OnFieldChanged += InputGameContext_OnFieldChanged;
            InitializeArrays();
            // InputGame.multipleQuestions = new List<CreateMultipleQuestionsViewModel>();
            form1Validate = true;
            disabledNext1 = false;
            disabledNext2 = false;
            if (authenticationStateTask is not null)
            {
                authenticationState = await authenticationStateTask;
                if (authenticatedUser is null)
                    authenticatedUser = authenticationState?.User;
            }
            Games = new List<GameViewModel>();
            if (authenticatedUser.IsInRole("Admin"))
                getPriorGamesEndpoint = $"{backendUrl}/api/Game/GetAll";
            else
            {
                var user = await Http.GetFromJsonAsync<UserViewModel>($"{backendUrl}/api/User/userdetails/{authenticatedUser.Identity.Name}");
                getPriorGamesEndpoint = $"{backendUrl}/api/Game/getgamesbycustomer/{user.Company}";
            }
            if (!string.IsNullOrEmpty(serviceEndpoint))
                Games = await Http.GetFromJsonAsync<List<GameViewModel>>(getPriorGamesEndpoint);
        }
        else
            Navigation.NavigateTo("/games");
    }

    private bool _isJsInitialized = false;
    private async Task OnInputFileChanged(IBrowserFile file)
    {
        await LoadFiles(file);
    }

    private async Task LoadFiles(IBrowserFile file)
    {
        var regexItem = new Regex("^[a-zA-Z0-9_.-]*$");
        if (InputGame.Image == null)
            InputGame.Image = new EditGameImageViewModel();

        InputGame.Image.Title = file.Name;

        if (regexItem.IsMatch(file.Name))
        {
            fileNameWrong = false;
            var format = file.ContentType;
            var resizeImage = await file.RequestImageFileAsync(format, 300, int.MaxValue);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            InputGame.Image.Content = Convert.ToBase64String(buffer);
            base64data = $"data:{format};base64,{InputGame.Image.Content}";
        }
        else
        {
            fileNameWrong = true;
            disabledNext1 = true;
        }
        StateHasChanged();
    }
    private async Task DeleteImage()
    {
        InputGame.Image.Content = string.Empty;
        await ClearAsync();
        base64data = "data:image/png;base64,";
        StateHasChanged();
    }

    private async Task InjectJavaScriptAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.scrollToElement = function(elementId) {
                    var element = document.getElementById(elementId);
                    if (element) {
                        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                };
            ");
            _isJsInitialized = true;
        }
        catch (InvalidOperationException)
        {
            // Le JavaScript n'a pas pu être injecté, probablement parce que nous sommes en mode rendu statique
            // Nous pouvons ignorer cette erreur en toute sécurité, car le script sera injecté lors du prochain rendu côté client
        }
    }

    private void InitializeArrays()
    {
        int count = InputGame.multipleQuestions?.Count ?? 0;
        questionRefs = new ElementReference[count];
        questionComponents = new AddQuestionFormComponent[count];
    }

    private async Task NavigateToNext(int currentIndex)
    {
        if (currentIndex < InputGame.multipleQuestions.Count - 1)
        {
            await SelectAndFocusQuestion(currentIndex + 1);
        }
    }

    private async Task NavigateToPrevious(int currentIndex)
    {
        if (currentIndex > 0)
        {
            await SelectAndFocusQuestion(currentIndex - 1);
        }
    }

    private async Task SelectAndFocusQuestion(int index)
    {
        selectedQuestionIndex = index;
        StateHasChanged();

        // Faire défiler jusqu'à la question sélectionnée dans le formulaire principal
        await JSRuntime.InvokeVoidAsync("scrollToElement", $"question-{index}");

        // Mettre le focus sur le premier champ de la question dans le formulaire principal
        if (questionComponents != null && questionComponents.Length > index && questionComponents[index] != null)
        {
            await questionComponents[index].FocusFirstInput();
        }
    }


    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text)) return string.Empty;
        return text.Length <= maxLength ? text : $"{text.Substring(0, maxLength)}...";
    }

    bool _expanded = true;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }
    private List<string> _events = new();

    void RowClicked(DataGridRowClickEventArgs<CreateMultipleQuestionsViewModel> args)
    {
        // selectedItem = args.Item;
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<CreateMultipleQuestionsViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<CreateMultipleQuestionsViewModel> items)
    {
        // selectedGames = items.ToList();
        // disabledDelete = !(selectedGames.Count > 0);

        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    void Closed(MudChip<string> chip)
    {
        InputGame.Image = new EditGameImageViewModel();
    }

    private void InputGameContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (!String.IsNullOrEmpty(InputGame.Title)
        && !String.IsNullOrEmpty(InputGame.DifficultyLevel)
        && !String.IsNullOrEmpty(InputGame.Theme)
        && !String.IsNullOrEmpty(InputGame.ElligibleSub))
            disabledNext1 = false;
        if (!String.IsNullOrEmpty(InputGame.Description))
            disabledNext2 = false;
        StateHasChanged();
    }

    protected async Task CreateFormCanceled()
    {
        formQuestions = !formQuestions;
        form3Validate = !form3Validate;
    }

    private async void AddNewPage()
    {
        if (InputGame.multipleQuestions == null)
        {
            InputGame.multipleQuestions = new List<CreateMultipleQuestionsViewModel>();
        }
        if (InputGame.multipleQuestions.Count == 0 || InputGame.multipleQuestions.LastOrDefault().IsValid)
        {

            InputGame.multipleQuestions.LastOrDefault().Expanded = false;

            InputGame.multipleQuestions.Add(new CreateMultipleQuestionsViewModel
                    {
                        Question = string.Empty,
                        Id = InputGame.multipleQuestions.Count + 1,
                        PossibleAnswers =
                                [
                                    new CreateAnswerViewModel { Id = 1,
                                Label = $"Answer 1",
                                Answer = string.Empty,
                                IsCorrect = false, Order = 0}
                                ],
                        CorrectAnswerExplanation = string.Empty,
                        ImageFiles = [],
                        AudioFiles = [],
                        Xperience = InputGame.DifficultyLevel == "Easy" ? 10 : (InputGame.DifficultyLevel == "Medium" ? 14 : 16),
                        Expanded = true,
                        Duration = new TimeSpan(0, 1, 0),
                        Min = 1,
                        Sec = 0
                    });
            currentQuestionIndex = InputGame.multipleQuestions.Count - 1;
            InitializeArrays();
            StateHasChanged();
        }
        else
            Snackbar.Add("Please fill or delete the last quiz first", MudBlazor.Severity.Error);
        await SelectAndFocusQuestion(currentQuestionIndex);
    }


    protected async void CreateFormValid()
    {
        // _questionFormInput = validQuestionFom;
        // InputGame.multipleQuestions.Add(_questionFormInput);
        // InputGame.TotalXperience += _questionFormInput.Xperience;
        // InputGame.TotalDuration.Add(TimeSpan.Parse(_questionFormInput.Duration));
        // Snackbar.Add("Question Form Has Been Added Successfully", MudBlazor.Severity.Success);
        // formQuestions = !formQuestions;
        // form3Validate = !form3Validate;
        StateHasChanged();
    }

    private void OnValidSubmit(EditContext context)
    {
        if (form1Validate)
        {
            form1Validate = false;
            form2Validate = true;
        }
        else if (form2Validate)
            form2Validate = false;
        StateHasChanged();
    }

    private void DisplayFormQuestions()
    {
        form3Validate = false;
        formQuestions = !formQuestions;
    }

    private void NavigateToNextGameForm()
    {
        if (form1Validate)
        {
            form1Validate = false;
            form2Validate = true;
        }
        else if (form2Validate)
        {
            form2Validate = false;
            form3Validate = true;
        }
    }

    private void GoBackToForm1()
    {
        form1Validate = true;
        form2Validate = false;
        StateHasChanged();
    }

    private async Task ValidateAndSave(int statusId)
    {
        if (ValidateAllForms())
        {
            if (InputGame.multipleQuestions.LastOrDefault().IsValid)
            {
                InputGame.Status = statusId == 0 ? "Draft" : "Published";
                InputGame.Creator = authenticatedUser.Identity.Name; ;
                HttpResponseMessage result = await Http.PostAsJsonAsync(serviceEndpoint, InputGame);
                Navigation.NavigateTo("/games");
            }
        }
        else
        {
            Snackbar.Add("Please fill all required fields correctly before saving.", MudBlazor.Severity.Warning);
        }
    }
    private bool ValidateAllForms()
    {
        if (string.IsNullOrWhiteSpace(InputGame.Title) ||
            string.IsNullOrWhiteSpace(InputGame.Theme) ||
            string.IsNullOrWhiteSpace(InputGame.ElligibleSub) ||
            string.IsNullOrWhiteSpace(InputGame.DifficultyLevel))
        {
            return false;
        }

        if (InputGame.multipleQuestions == null || InputGame.multipleQuestions.Count == 0)
        {
            return false;
        }

        foreach (var question in InputGame.multipleQuestions)
        {
            if (string.IsNullOrWhiteSpace(question.Question) ||
                question.PossibleAnswers == null ||
                question.PossibleAnswers.Count < 2 ||
                !question.PossibleAnswers.Any(a => a.IsCorrect) ||
                question.Xperience <= 0 ||
                question.Duration == null ||
                question.Duration.Value.TotalSeconds <= 0)
            {
                return false;
            }
        }

        return true;
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        var regexItem = new Regex("^[a-zA-Z0-9_.-]*$");
        if (InputGame.Image is null)
            InputGame.Image = new EditGameImageViewModel();
        InputGame.Image.Title = e.File.Name.ToString();
        if (regexItem.IsMatch(e.File.Name.ToString()))
        {
            fileNameWrong = false;
            var format = e.File.ContentType;
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, int.MaxValue);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            InputGame.Image.Content = Convert.ToBase64String(buffer);
            base64data = "data:image/png;base64," + InputGame.Image.Content;
            StateHasChanged();
        }
        else
        {
            fileNameWrong = true;
            disabledNext1 = true;
        }
    }

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private async Task<HttpResponseMessage> ClearAsync()
    {
        var resp = new HttpResponseMessage();
        if(!string.IsNullOrEmpty(InputGame.Image.Content))
        {
            resp = await Http.GetAsync($"{backendUrl}/api/Game/DeleteImageFromGame/{InputGame.Id.ToString()}");
        }
        InputGame.Image = new EditGameImageViewModel();
        _fileUpload?.ClearAsync();
        return resp;
    }

    public class ModelFluentValidator : AbstractValidator<Model>
    {
        public ModelFluentValidator()
        {
            RuleFor(x => x.Files)
                .NotEmpty()
                .WithMessage("There must be at least 1 file.");
        }

        public Func<object, string, Task<IEnumerable<string>>> 
        ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Model>.CreateWithOptions((Model)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

}
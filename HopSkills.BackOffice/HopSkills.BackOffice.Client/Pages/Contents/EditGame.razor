@page "/editgame/{selectedId}"
@inject HttpClient Http

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FluentValidation
@using Microsoft.AspNetCore.Components.Forms;
@using System.Security.Claims
@using static HopSkills.BackOffice.Client.Controls.AddQuestionFormComponent
@inject Microsoft.Extensions.Configuration.IConfiguration config;

@inject IDialogService DialogService

@inject ISnackbar Snackbar
@inject NavigationManager Navigation


<MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Bottom">

    @if (form1Validate)
    {
        <MudTimelineItem Color="Color.Info">
            <ItemContent>
                <MudText Color="Color.Info" Align="Align.Center">General Information</MudText>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem>
            <ItemContent>
                <MudText Align="Align.Center">Content Creation</MudText>
            </ItemContent>
        </MudTimelineItem>
    }

    @if (form2Validate)
    {
        <MudTimelineItem Color="Color.Success">
            <ItemContent>
                <MudText Color="Color.Success" Align="Align.Center">General Information</MudText>
            </ItemContent>
        </MudTimelineItem>
        @if (InputGame.multipleQuestions.Any())
        {
            <MudTimelineItem Color="Color.Success">
                <ItemContent>
                    <MudText Color="Color.Success" Align="Align.Center">Content Creation</MudText>
                </ItemContent>
            </MudTimelineItem>
        }
        else
        {
            <MudTimelineItem Color="Color.Info">
                <ItemContent>
                    <MudText Color="Color.Info" Align="Align.Center">Content Creation</MudText>
                </ItemContent>
            </MudTimelineItem>
        }
    }
</MudTimeline>
<MudGrid Class="justify-center">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudStack Style="width: 100%">
                @if (form1Validate)
                {
                    <EditForm Model="@InputGame" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <MudGrid>
                            <MudItem xs="12">
                                <MudCard>
                                    <MudCardContent>
                                        <MudItem xs="12">
                                            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                                           @ref="@_fileUpload"
                                                           @bind-Files="_model.Files"
                                                           For="@(() => _model.Files)"
                                                           AppendMultipleFiles="false"
                                                           Hidden="@false"
                                                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                                           InputStyle="opacity:0"
                                                           ErrorText="@string.Empty"
                                                           tabindex="-1"
                                                           Accept=".png, .jpg"
                                                           @ondrop="@ClearDragClass"
                                                           @ondragenter="@SetDragClass"
                                                           @ondragleave="@ClearDragClass"
                                                           @ondragend="@ClearDragClass"
                                                           OnFilesChanged="LoadFiles">
                                                <ActivatorContent>
                                                    <MudPaper Outlined="true"
                                                              Class="@_dragClass">
                                                        <MudText Typo="Typo.h6">
                                                            Add an image
                                                        </MudText>
                                                        <div class="d-flex justify-center">
                                                            @if (!string.IsNullOrEmpty(InputGame.Image?.Content))
                                                            {
                                                                <MudImage Fluid="true"
                                                                          ObjectFit="ObjectFit.Cover"
                                                                          Src="@base64data" />
                                                            }
                                                        </div>
                                                    </MudPaper>
                                                </ActivatorContent>
                                            </MudFileUpload>
                                            @if (fileNameWrong)
                                            {
                                                <MudAlert Severity="MudBlazor.Severity.Error">
                                                    File Name contains special characters.
                                                    Please Upload a file with no special
                                                    characters and less than 255 characters.
                                                </MudAlert>
                                            }
                                            <MudToolBar Gutters="@false"
                                                        Class="relative d-flex justify-end gap-4">
                                                <MudButton Color="Color.Primary"
                                                           OnClick="@OpenFilePickerAsync"
                                                           Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Image">
                                                    Upload
                                                </MudButton>
                                                <MudButton Color="Color.Error"
                                                           Disabled="@(_model.Files is null || !_model.Files.Any())"
                                                           OnClick="@ClearAsync"
                                                           Variant="Variant.Filled">
                                                    Clear
                                                </MudButton>
                                            </MudToolBar>
                                        </MudItem>
                                        <MudItem>
                                            @if (_fileUpload?.ValidationErrors.Any() ?? false)
                                            {
                                                <MudText Color="Color.Error"
                                                         Typo="@Typo.caption">
                                                    @_fileUpload?.ValidationErrors[0]
                                                </MudText>
                                            }
                                        </MudItem>
                                        <MudItem xs="12">
                                        </MudItem>
                                        <MudGrid>
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudTextField T="string" Required="true" @bind-Value="@InputGame.Title"
                                                              UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                              Label="Title" For="@(() => InputGame.Title)" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudSelect T="string" Required="true"
                                                           @bind-Value="@InputGame.DifficultyLevel"
                                                           Placeholder="Select a difficulty level"
                                                           UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                           For="@(() => InputGame.DifficultyLevel)"
                                                           Label="Difficulty level" Variant="Variant.Outlined"
                                                           AnchorOrigin="Origin.BottomCenter">
                                                    <MudSelectItem T="string" Value="@("Easy")" />
                                                    <MudSelectItem T="string" Value="@("Medium")" />
                                                    <MudSelectItem T="string" Value="@("Hard")" />
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudSelect T="string" Required="false"
                                                           @bind-Value="@InputGame.PriorGame" Placeholder="Select a game"
                                                           Label="Game to complete before" Variant="Variant.Outlined"
                                                           AnchorOrigin="Origin.BottomCenter">
                                                    @foreach (var item in Games)
                                                    {
                                                        <MudSelectItem T="string" Value="@(item.Title)" />
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                        </MudGrid>
                                        <MudGrid>
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudSelect T="string" Required="true" For="@(() => InputGame.Theme)"
                                                           @bind-Value="@InputGame.Theme" Placeholder="Select a Theme"
                                                           UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                           Label="Theme related to" Variant="Variant.Outlined"
                                                           AnchorOrigin="Origin.BottomCenter">
                                                    <MudSelectItem T="string" Value="@("Theme A")" />
                                                    <MudSelectItem T="string" Value="@("Theme B")" />
                                                    <MudSelectItem T="string" Value="@("Theme C")" />
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudSelect T="string" Required="true" For="@(() => InputGame.ElligibleSub)"
                                                           @bind-Value="@InputGame.ElligibleSub" Placeholder="Select a Subscription"
                                                           UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                           Label="Eligible subscription" Variant="Variant.Outlined"
                                                           AnchorOrigin="Origin.BottomCenter">
                                                    <MudSelectItem T="string" Value="@("Sub A")" />
                                                    <MudSelectItem T="string" Value="@("Sub B")" />
                                                    <MudSelectItem T="string" Value="@("Sub C")" />
                                                </MudSelect>
                                            </MudItem>
                                        </MudGrid>
                                        <MudGrid>
                                            <MudItem xs="12">
                                                <MudTextField Required="true" For="@(() => InputGame.Description)"
                                                              UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                              @bind-Value="@InputGame.Description" InputMode="InputMode.text"
                                                              T="string" Label="Enter a description" AutoGrow="true" Variant="Variant.Filled" Lines="5" />
                                            </MudItem>
                                        </MudGrid>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton ButtonType="ButtonType.Submit"
                                                   Variant="Variant.Filled" Color="Color.Primary"
                                                   Class="ml-auto" EndIcon="@Icons.Material.Filled.NavigateNext">Next</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                }
                @if (form2Validate)
                {
                    <div class="object-left">
                        <MudButton Size="Size.Medium" ButtonType="ButtonType.Button"
                                   OnClick="NavigateToPreviousGameForm"
                                   Color="Color.Error" StartIcon="@Icons.Material.Filled.NavigateBefore"
                                   Variant="Variant.Filled">
                            Back
                        </MudButton>
                    </div>
                    @if (InputGame.multipleQuestions is not null && InputGame.multipleQuestions.Count() > 0)
                    {
                        foreach (var multiQ in InputGame.multipleQuestions)
                        {
                            <AddQuestionFormComponent questionFormInput="multiQ"
                                                      OnValidEvent="CreateFormValid"
                                                      OnCancelEvent="CreateFormCanceled">
                            </AddQuestionFormComponent>
                        }
                    }
                    else
                    {
                        <MudGrid Justify="Justify.Center">
                            <MudButtonGroup>
                                <MudButton StartIcon="@Icons.Material.Rounded.Add" Ripple="true">Add a quizz</MudButton>
                                <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                                    <MudMenuItem OnClick="() => AddQuizz()">Multiple choices question</MudMenuItem>
                                    <MudMenuItem OnClick="() => AddQuizz()">True or False</MudMenuItem>
                                </MudMenu>
                            </MudButtonGroup>
                        </MudGrid>
                    }
                }
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudItem>
        <MudPaper Class="gap-4 pa-4 mud-height-full">
            <MudGrid>
                <MudItem Class="d-flex justify-start flex-grow-1 gap-4">
                    <MudText Class="d-inline-flex pa-4">Title:@InputGame.Title </MudText>
                    <MudText Class="d-inline-flex justify-end pa-4">
                        <MudIcon Icon="@Icons.Material.Outlined.Timer" />@InputGame.TotalDuration
                    </MudText>
                </MudItem>
                <MudItem Class="d-flex justify-end flex-grow-1 gap-4">
                    <MudText Class="d-inline-flex pa-4">Theme:@InputGame.Theme</MudText>
                    <MudText Class="d-inline-flex pa-4">
                        <MudIcon Icon="@Icons.Material.Outlined.Star" />@InputGame.TotalXperience
                    </MudText>
                </MudItem>
            </MudGrid>
            <MudDivider DividerType="DividerType.FullWidth" />
            <MudGrid Style="object-position:bottom">
                <MudItem xs="12" sm="12" md="12" xl="12">
                    <MudPaper Style="border-radius: 24px !important;">
                        <MudExpansionPanels MultiExpansion="true">
                            @if (InputGame.multipleQuestions is not null
                            && InputGame.multipleQuestions.Count() > 0)
                            {
                                @foreach (var item in InputGame.multipleQuestions)
                                {
                                    <MudExpansionPanel Text="@item.Question">
                                        @if (item.PossibleAnswers is not null
                                       && item.PossibleAnswers.Count != 0)
                                        {
                                            @foreach (var answ in item.PossibleAnswers)
                                            {
                                                <MudText>
                                                    @answ.Answer
                                                    <MudIcon Icon="@(answ.IsCorrect? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"
                                                             Color="@(answ.IsCorrect? Color.Success : Color.Error)" />
                                                </MudText>
                                            }
                                        }
                                    </MudExpansionPanel>
                                }
                            }
                        </MudExpansionPanels>
                    </MudPaper>
                </MudItem>
            </MudGrid>
            @if (form2Validate)
            {
                <MudGrid Justify="Justify.Center">
                    <MudItem>
                        <MudButton ButtonType="ButtonType.Button"
                                   EndIcon="@Icons.Material.Filled.Add"
                                   Color="Color.Primary"
                                   OnClick="AddQuizz">
                            Add an new quizz
                        </MudButton>
                    </MudItem>
                </MudGrid>
            }
            <MudGrid>
                <MudItem>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                        <MudButton>Save As</MudButton>
                        <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                            <MudMenuItem OnClick="() => SaveGame(0)">Draft</MudMenuItem>
                            <MudMenuItem OnClick="() => SaveGame(1)">And Publish</MudMenuItem>
                        </MudMenu>
                    </MudButtonGroup>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private string? serviceEndpoint;
    private string? backendUrl;
    private bool success;
    private bool disabledNext1 { get; set; }
    private bool disabledNext2 { get; set; }
    private bool form1Validate { get; set; }
    private bool form2Validate { get; set; }
    private bool form3Validate { get; set; }
    private bool formQuestions { get; set; }
    private bool form1IsValid  { get; set; }
    private bool fileNameWrong { get; set; }

    private string getPriorGamesEndpoint { get; set; }
    private CreateMultipleQuestionsViewModel _questionFormInput { get; set; }
    EditContext InputGameContext;
    private EditGameViewModel InputGame { get; set; } = new EditGameViewModel();
    string[] errors = { };
    MudForm form1 = new MudForm() { IsValid = false };
    MudButton next1 = new MudButton() { Disabled = true };
    MudButton next2 = new MudButton() { Disabled = true };
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authenticationState { get; set; }
    private ClaimsPrincipal authenticatedUser { get; set; }
    private List<GameViewModel>? Games;
    private List<AddQuestionFormComponent> addQuestionForms { get; set; }
    [Parameter]
    public string selectedId { get; set; }
    private string base64data = "";

    public class Model
    {
        public IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();
    }

    private Model _model = new();
    private ModelFluentValidator _validationRules = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private bool _isValid;
    private bool _isTouched;
    private const string FileContent = "this is content";
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    protected override async Task OnInitializedAsync()
    {
        addQuestionForms = new List<AddQuestionFormComponent>();
        fileNameWrong = false;
        InputGameContext = new(InputGame);
        InputGame = await Http.GetFromJsonAsync<EditGameViewModel>($"{backendUrl}/api/Game/Get/{selectedId}");
        if(InputGame != null)
        {
            InputGame.multipleQuestions.ForEach(m => m.IsValid = true);
            base64data = "data:image/png;base64," + InputGame.Image.Content;
            serviceEndpoint = $"{backendUrl}/api/Game/EditGame";
            InputGameContext = new(InputGame);
            InputGameContext.OnFieldChanged += InputGameContext_OnFieldChanged;

            // InputGame.multipleQuestions = new List<CreateMultipleQuestionsViewModel>();
            form1Validate = true;
            disabledNext1 = false;
            disabledNext2 = false;
            if (authenticationStateTask is not null)
            {
                authenticationState = await authenticationStateTask;
                if (authenticatedUser is null)
                    authenticatedUser = authenticationState?.User;
            }
            Games = new List<GameViewModel>();
            if (authenticatedUser.IsInRole("Admin"))
                getPriorGamesEndpoint = $"{backendUrl}/api/Game/GetAll";
            else
            {
                var user = await Http.GetFromJsonAsync<UserViewModel>($"{backendUrl}/api/User/userdetails/{authenticatedUser.Identity.Name}");
                getPriorGamesEndpoint = $"{backendUrl}/api/Game/getgamesbycustomer/{user.Company}";
            }
            if (!string.IsNullOrEmpty(serviceEndpoint))
                Games = await Http.GetFromJsonAsync<List<GameViewModel>>(getPriorGamesEndpoint);
        }
        else
            Navigation.NavigateTo("/games");
    }

    bool _expanded = true;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }
    private List<string> _events = new();

    void RowClicked(DataGridRowClickEventArgs<CreateMultipleQuestionsViewModel> args)
    {
        // selectedItem = args.Item;
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<CreateMultipleQuestionsViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<CreateMultipleQuestionsViewModel> items)
    {
        // selectedGames = items.ToList();
        // disabledDelete = !(selectedGames.Count > 0);

        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    void Closed(MudChip<string> chip)
    {
        InputGame.Image = new EditGameImageViewModel();
    }

    private void InputGameContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (!String.IsNullOrEmpty(InputGame.Title)
        && !String.IsNullOrEmpty(InputGame.DifficultyLevel)
        && !String.IsNullOrEmpty(InputGame.Theme)
        && !String.IsNullOrEmpty(InputGame.ElligibleSub))
            disabledNext1 = false;
        if (!String.IsNullOrEmpty(InputGame.Description))
            disabledNext2 = false;
        StateHasChanged();
    }

    protected async Task CreateFormCanceled()
    {
        formQuestions = !formQuestions;
        form3Validate = !form3Validate;
    }

    private void AddQuizz()
    {
        addQuestionForms.Add(new AddQuestionFormComponent());
    }


    protected async void CreateFormValid()
    {
        // _questionFormInput = validQuestionFom;
        // InputGame.multipleQuestions.Add(_questionFormInput);
        // InputGame.TotalXperience += _questionFormInput.Xperience;
        // InputGame.TotalDuration.Add(TimeSpan.Parse(_questionFormInput.Duration));
        // Snackbar.Add("Question Form Has Been Added Successfully", MudBlazor.Severity.Success);
        // formQuestions = !formQuestions;
        // form3Validate = !form3Validate;
        StateHasChanged();
    }

    private void OnValidSubmit(EditContext context)
    {
        if (form1Validate)
        {
            form1Validate = false;
            form2Validate = true;
        }
        else if (form2Validate)
            form2Validate = false;
        StateHasChanged();
    }

    private void DisplayFormQuestions()
    {
        form3Validate = false;
        formQuestions = !formQuestions;
    }

    private void NavigateToNextGameForm()
    {
        if (form1Validate)
        {
            form1Validate = false;
            form2Validate = true;
        }
        else if (form2Validate)
        {
            form2Validate = false;
            form3Validate = true;
        }
    }

    private void NavigateToPreviousGameForm()
    {
        if (form2Validate)
        {
            form1Validate = true;
            form2Validate = false;
        }
        else if (form3Validate)
        {
            form2Validate = true;
            form3Validate = false;
        }
    }

    private async void SaveGame(int Id)
    {
        if (InputGame.multipleQuestions is not null && InputGame.multipleQuestions.Count != 0)
        {
            if (InputGame.multipleQuestions.LastOrDefault().IsValid)
            {
                InputGame.Status = Id == 0 ? "Draft" : "Published";
                InputGame.Creator = authenticatedUser.Identity.Name; ;
                HttpResponseMessage result = await Http.PostAsJsonAsync(serviceEndpoint, InputGame);
                Navigation.NavigateTo("/games");
            }
            else
                Snackbar.Add("Please fill or delete the last quiz first", MudBlazor.Severity.Error);
        }
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        var regexItem = new Regex("^[a-zA-Z0-9_.-]*$");
        InputGame.Image.Title = e.File.Name.ToString();
        if (regexItem.IsMatch(e.File.Name.ToString()))
        {
            fileNameWrong = false;
            var format = e.File.ContentType;
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, int.MaxValue);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            InputGame.Image.Content = Convert.ToBase64String(buffer);
            base64data = "data:image/png;base64," + InputGame.Image.Content;
            StateHasChanged();
        }
        else
        {
            fileNameWrong = true;
            disabledNext1 = true;
        }
    }

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private Task ClearAsync()
    {
        InputGame.Image = new EditGameImageViewModel();
        _fileUpload?.ClearAsync();
        return Task.CompletedTask;
    }

    public class ModelFluentValidator : AbstractValidator<Model>
    {
        public ModelFluentValidator()
        {
            RuleFor(x => x.Files)
                .NotEmpty()
                .WithMessage("There must be at least 1 file.");
        }

        public Func<object, string, Task<IEnumerable<string>>> 
        ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Model>.CreateWithOptions((Model)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

}
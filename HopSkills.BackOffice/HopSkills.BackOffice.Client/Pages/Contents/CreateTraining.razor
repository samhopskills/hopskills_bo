@page "/createtraining"
@inject HttpClient Http

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FluentValidation
@using Microsoft.AspNetCore.Components.Forms;
@using System.Security.Claims
@using static HopSkills.BackOffice.Client.Controls.AddQuestionFormComponent
@inject Microsoft.Extensions.Configuration.IConfiguration config;

@inject IDialogService DialogService

@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Bottom">

    @if (form1Validate)
    {
        <MudTimelineItem Color="Color.Info">
            <ItemContent>
                <MudText Color="Color.Info" Align="Align.Center">Step 1</MudText>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem>
            <ItemContent>
                <MudText Align="Align.Center">Step 2</MudText>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem>
            <ItemContent>
                <MudText Align="Align.Center">Step 3</MudText>
            </ItemContent>
        </MudTimelineItem>
    }
    @if (form2Validate)
    {

        <MudTimelineItem Color="Color.Success">
            <ItemContent>
                <MudText Color="Color.Success" Align="Align.Center">Step 1</MudText>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Info">
            <ItemContent>
                <MudText Color="Color.Info" Align="Align.Center">Step 2</MudText>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem>
            <ItemContent>
                <MudText Align="Align.Center">Step 3</MudText>
            </ItemContent>
        </MudTimelineItem>
    }

    @if (form3Validate)
    {
        <MudTimelineItem Color="Color.Success">
            <ItemContent>
                <MudText Color="Color.Success" Align="Align.Center">Step 1</MudText>
            </ItemContent>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Success">
            <ItemContent>
                <MudText Color="Color.Success" Align="Align.Center">Step 2</MudText>
            </ItemContent>
        </MudTimelineItem>
        @if (InputTraining.AttachedChapters.Any())
        {
            <MudTimelineItem Color="Color.Success">
                <ItemContent>
                    <MudText Color="Color.Success" Align="Align.Center">Step 3</MudText>
                </ItemContent>
            </MudTimelineItem>
        }
        else
        {
            <MudTimelineItem Color="Color.Info">
                <ItemContent>
                    <MudText Color="Color.Info" Align="Align.Center">Step 3</MudText>
                </ItemContent>
            </MudTimelineItem>
        }

    }

</MudTimeline>

<MudGrid>
    <MudItem xs="12" sm="7">

        <MudPaper Class="pa-4">
            <MudStack Style="width: 100%">
                <EditForm EditContext="InputTrainingContext" FormName="FormTraining" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    @if (form1Validate)
                    {
                        <MudItem xs="12">
                            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                           @ref="@_fileUpload"
                                           @bind-Files="_model.Files"
                                           For="@(() => _model.Files)"
                                           AppendMultipleFiles="false"
                                           Hidden="@false"
                                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                           InputStyle="opacity:0"
                                           ErrorText="@string.Empty"
                                           tabindex="-1"
                                           Accept=".png, .jpg"
                                           @ondrop="@ClearDragClass"
                                           @ondragenter="@SetDragClass"
                                           @ondragleave="@ClearDragClass"
                                           @ondragend="@ClearDragClass"
                                           OnFilesChanged="LoadFiles">
                                <ActivatorContent>
                                    <MudPaper Outlined="true"
                                              Class="@_dragClass">
                                        <MudText Typo="Typo.h6">
                                            Add an image
                                        </MudText>
                                        @foreach (var file in _model.Files?.Select(file => file.Name) ?? Enumerable.Empty<string>())
                                        {
                                            <MudChip T="string" Color="Color.Dark" Text="@file" />
                                        }
                                    </MudPaper>
                                </ActivatorContent>
                            </MudFileUpload>
                            <MudToolBar Gutters="@false"
                                        Class="relative d-flex justify-end gap-4">
                                <MudButton Color="Color.Primary"
                                           OnClick="@OpenFilePickerAsync"
                                           Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Image">
                                    Upload
                                </MudButton>
                                <MudButton Color="Color.Error"
                                           Disabled="@(_model.Files is null || !_model.Files.Any())"
                                           OnClick="@ClearAsync"
                                           Variant="Variant.Filled">
                                    Clear
                                </MudButton>
                            </MudToolBar>
                        </MudItem>
                        <MudItem>
                            @if (_fileUpload?.ValidationErrors.Any() ?? false)
                            {
                                <MudText Color="Color.Error"
                                         Typo="@Typo.caption">
                                    @_fileUpload?.ValidationErrors[0]
                                </MudText>
                            }
                        </MudItem>
                        <MudItem xs="12">
                            IsValid: @_isValid - IsTouched: @_isTouched
                        </MudItem>
                        <MudCard>
                            <MudCardContent>
                                <MudForm @ref="form1" @bind-IsValid="@success">
                                    <MudGrid>
                                        <MudItem xs="12" sm="6" md="4">
                                            <MudTextField T="string" Required="true" 
                                                @bind-Value="@InputTraining.Title"
                                                          UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                          Label="Title" For="@(() => InputTraining.Title)" Variant="Variant.Outlined" />
                                        </MudItem>
                                        <MudItem xs="12" sm="6" md="4">
                                            <MudSelect T="string" Required="true" @bind-Value="@InputTraining.DifficultyLevel"
                                                       Placeholder="Select a difficulty level"
                                                       UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                       For="@(() => InputTraining.DifficultyLevel)"
                                                       Label="Difficulty level" Variant="Variant.Outlined"
                                                       AnchorOrigin="Origin.BottomCenter">
                                                <MudSelectItem T="string" Value="@("Easy")" />
                                                <MudSelectItem T="string" Value="@("Medium")" />
                                                <MudSelectItem T="string" Value="@("Hard")" />
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" sm="6" md="4">
                                            <MudSelect T="string" Required="false"
                                                       @bind-Value="@InputTraining.PriorGame" Placeholder="Select a game"
                                                       Label="Game to complete before" Variant="Variant.Outlined"
                                                       AnchorOrigin="Origin.BottomCenter">
                                                @foreach (var item in Trainings)
                                                {
                                                    <MudSelectItem T="string" Value="@(item.Title)" />
                                                }
                                            </MudSelect>
                                        </MudItem>
                                    </MudGrid>
                                    <MudGrid>
                                        <MudItem xs="12" sm="6" md="4">
                                            <MudSelect T="string" Required="true" For="@(() => InputTraining.Theme)" @bind-Value="@InputTraining.Theme" Placeholder="Select a Theme"
                                                       UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                       Label="Theme related to" Variant="Variant.Outlined"
                                                       AnchorOrigin="Origin.BottomCenter">
                                                <MudSelectItem T="string" Value="@("Theme A")" />
                                                <MudSelectItem T="string" Value="@("Theme B")" />
                                                <MudSelectItem T="string" Value="@("Theme C")" />
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" sm="6" md="4">
                                            <MudSelect T="string" Required="true" For="@(() => InputTraining.ElligibleSub)" @bind-Value="@InputTraining.ElligibleSub" Placeholder="Select a Subscription"
                                                       UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                       Label="Eligible subscription" Variant="Variant.Outlined"
                                                       AnchorOrigin="Origin.BottomCenter">
                                                <MudSelectItem T="string" Value="@("Sub A")" />
                                                <MudSelectItem T="string" Value="@("Sub B")" />
                                                <MudSelectItem T="string" Value="@("Sub C")" />
                                            </MudSelect>
                                        </MudItem>
                                    </MudGrid>
                                </MudForm>
                            </MudCardContent>
                        </MudCard>
                    }
                    @if (form2Validate)
                    {
                        <MudCard>
                            <MudCardContent>
                                <MudItem xs="12">
                                    <MudTextField Required="true" For="@(() => InputTraining.Description)"
                                                  UserAttributes="@(new() { { "aria-required", "true" } } )"
                                                  @bind-Value="@InputTraining.Description" InputMode="InputMode.text"
                                                  T="string" Label="Enter a description" AutoGrow="true" Variant="Variant.Filled" Lines="10" />
                                </MudItem>
                            </MudCardContent>
                            <MudCardActions>
                            </MudCardActions>
                        </MudCard>

                    }
                    @if (form3Validate)
                    {
                        <MudGrid>
                            <MudItem xs="12" sm="12" md="12">
                                <MudCard>
                                    <MudCardMedia Image="images/EmployeeTrainingPresentation.svg" />
                                   @*  <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">Chapter</MudText>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudText>Create a new chapter to your training session</MudText>
                                    </MudCardContent> *@
                                    <MudCardActions>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="DisplayFormQuestions">Add</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    }
                    @if (formChapter)
                    {
                        <AddChapterFormComponent chapterFormInput="@_chapterFormInput"
                                                  OnValidEvent="CreateFormValid"
                                                  OnCancelEvent="CreateFormCanceled"></AddChapterFormComponent>
                    }
                </EditForm>
            </MudStack>
        </MudPaper>
        @if (!formChapter)
        {
            <MudPaper Class="pa-4 mt-4">
                @if (form1Validate)
                {
                    <MudButton Disabled="@disabledNext1" Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="NavigateToNextGameForm">Next</MudButton>
                }
                @if (form2Validate || form3Validate)
                {
                    <MudButton Disabled="@disabledNext2" Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="NavigateToNextGameForm">Next</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="NavigateToPreviousGameForm" Class="mx-2">Previous</MudButton>
                }
            </MudPaper>
        }
    </MudItem>
    <MudItem>
        <MudPaper Class="gap-4 pa-4 mud-height-full">
            <MudGrid>
                <MudItem Class="d-flex justify-start flex-grow-1 gap-4">
                    <MudText>Title:@InputTraining.Title </MudText>
                    <MudText>
                        <MudIcon Icon="@Icons.Material.Outlined.Timer" />
                        Duration: @InputTraining.TotalDuration.Minutes
                    </MudText>
                </MudItem>
                <MudItem Class="d-flex justify-end flex-grow-1 gap-4">
                    <MudText>Theme:@InputTraining.Theme</MudText>
                    <MudText>
                        <MudIcon Icon="@Icons.Material.Outlined.Star" />
                        Xp:@InputTraining.TotalXperience
                    </MudText>
                </MudItem>
            </MudGrid>
            <MudDivider DividerType="DividerType.FullWidth" />
            <MudGrid Style="object-position:bottom">
                <MudItem xs="12" sm="12" md="12" xl="12">
                    <MudPaper>
                        @foreach (var item in InputTraining.AttachedChapters)
                        {
                            <MudPaper Class=" gap-x-10 d-flex pa-4 ">
                                <MudText Class="d-inline-flex pa-4">@item.Title</MudText>
                                <MudText Class="d-inline-flex justify-end pa-4">
                                    <MudIcon Icon="@Icons.Material.Outlined.Star" />@item.Xperience
                                </MudText>
                                <MudText Class="d-inline-flex justify-end pa-4">
                                    <MudIcon Icon="@Icons.Material.Outlined.Timer" />@item.Duration
                                </MudText>
                                @*  <MudIconButton Class="d-flex justify-end"
                            Icon="@Icons.Material.Filled.Edit"/> *@
                            </MudPaper>

                        }
                    </MudPaper>

                </MudItem>

            </MudGrid>
            @if (InputTraining.AttachedChapters.Any())
            {
                <MudGrid>
                    <MudItem>
                        <MudPaper>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       DropShadow="false" OnClick="CreateTrainingAsDraft">Save As A Draft</MudButton>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       DropShadow="false" OnClick="CreateTrainingAndPublish">Save & Publish</MudButton>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private string? serviceEndpoint;
    private string? backendUrl;
    private bool success;
    private bool disabledNext1 { get; set; }
    private bool disabledNext2 { get; set; }
    private bool form1Validate { get; set; }
    private bool form2Validate { get; set; }
    private bool form3Validate { get; set; }
    private bool formChapter { get; set; }
    private bool form1IsValid { get; set; }
    private string getPriorTrainingsEndpoint { get; set; }
    private CreateChapterViewModel _chapterFormInput { get; set; }
    EditContext InputTrainingContext;
    [SupplyParameterFromForm]
    private CreateTrainingViewModel InputTraining { get; set; } = new CreateTrainingViewModel();
    string[] errors = { };
    MudForm form1 = new MudForm() { IsValid = false };
    MudButton next1 = new MudButton() { Disabled = true };
    MudButton next2 = new MudButton() { Disabled = true };
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authenticationState { get; set; }
    private ClaimsPrincipal authenticatedUser { get; set; }
    private List<TrainingViewModel>? Trainings;

    protected override async Task OnInitializedAsync()
    {
        backendUrl = config.GetValue<string>("BackendUrl");

        serviceEndpoint = $"{backendUrl}/api/Training/AddTraining";
        InputTrainingContext = new(InputTraining);
        InputTrainingContext.OnFieldChanged += InputTrainingContext_OnFieldChanged;
        InputTraining.AttachedChapters = new List<CreateChapterViewModel>();
        form1Validate = true;
        disabledNext1 = true;
        disabledNext2 = true;
        if (authenticationStateTask is not null)
        {
            authenticationState = await authenticationStateTask;
            if (authenticatedUser is null)
                authenticatedUser = authenticationState?.User;
        }
        Trainings = new List<TrainingViewModel>();
        if (authenticatedUser.IsInRole("Admin"))
            getPriorTrainingsEndpoint = $"{backendUrl}/api/Training/GetAll";
        else
        {
            var user = await Http.GetFromJsonAsync<UserViewModel>($"{backendUrl}/api/User/userdetails/{authenticatedUser.Identity.Name}");
            getPriorTrainingsEndpoint = $"{backendUrl}/api/Training/gettrainingsbycustomer/{user.Company}";
        }
        if (!string.IsNullOrEmpty(serviceEndpoint))
            Trainings = await Http.GetFromJsonAsync<List<TrainingViewModel>>(getPriorTrainingsEndpoint);
    }

    private void InputTrainingContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (!String.IsNullOrEmpty(InputTraining.Title)
        && !String.IsNullOrEmpty(InputTraining.DifficultyLevel)
        && !String.IsNullOrEmpty(InputTraining.Theme)
        && !String.IsNullOrEmpty(InputTraining.ElligibleSub))
            disabledNext1 = false;
        if (!String.IsNullOrEmpty(InputTraining.Description))
            disabledNext2 = false;
        StateHasChanged();
    }

    protected async Task CreateFormCanceled()
    {
        formChapter = !formChapter;
        form3Validate = !form3Validate;
    }

    protected async void CreateFormValid(CreateChapterViewModel validChapterFom)
    {
        // _chapterFormInput = validQuestionFom;
        // InputTraining.AttachedChapters.Add(_chapterFormInput);
        // InputTraining.TotalXperience += _chapterFormInput.Xperience;
        // InputTraining.TotalDuration.Add(_chapterFormInput.Duration.Value);
        // Snackbar.Add("Question Form Has Been Added Successfully", MudBlazor.Severity.Success);
        // formQuestions = !formQuestions;
        // form3Validate = !form3Validate;
        StateHasChanged();
    }

    private void OnValidSubmit(EditContext context)
    {
        StateHasChanged();
    }

    private void DisplayFormQuestions()
    {
        form3Validate = false;
        formChapter = !formChapter;
    }

    private void NavigateToNextGameForm()
    {
        if (form1Validate)
        {
            form1Validate = false;
            form2Validate = true;
        }
        else if (form2Validate)
        {
            form2Validate = false;
            form3Validate = true;
        }
    }

    private void NavigateToPreviousGameForm()
    {
        if (form2Validate)
        {
            form1Validate = true;
            form2Validate = false;
        }
        else if (form3Validate)
        {
            form2Validate = true;
            form3Validate = false;
        }
    }

    private async void CreateTrainingAndPublish()
    {
        InputTraining.Status = "Published";
        InputTraining.Creator = authenticatedUser.Identity.Name; ;
        var result = await Http.PostAsJsonAsync(serviceEndpoint, InputTraining);
        Navigation.NavigateTo("/trainings");
    }

    private async void CreateTrainingAsDraft()
    {
        InputTraining.Status = "Draft";
        InputTraining.Creator = authenticatedUser.Identity.Name;
        var result = await Http.PostAsJsonAsync(serviceEndpoint, InputTraining);
        Navigation.NavigateTo("/trainings");
    }

#nullable enable
    public class Model
    {
        public IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();
    }

    private Model _model = new();
    private ModelFluentValidator _validationRules = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private bool _isValid;
    private bool _isTouched;
    private const string FileContent = "this is content";
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizeImage = await e.File.RequestImageFileAsync(format, 300, int.MaxValue);
        var buffer = new byte[resizeImage.Size];
        await resizeImage.OpenReadStream().ReadAsync(buffer);
        InputTraining.Image = Convert.ToBase64String(buffer);
    }

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private Task ClearAsync()
        => _fileUpload?.ClearAsync() ?? Task.CompletedTask;

    public class ModelFluentValidator : AbstractValidator<Model>
    {
        public ModelFluentValidator()
        {
            RuleFor(x => x.Files)
                .NotEmpty()
                .WithMessage("There must be at least 1 file.");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Model>.CreateWithOptions((Model)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

}
